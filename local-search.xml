<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2024/02/29/CSS/"/>
    <url>/2024/02/29/CSS/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器运行原理</title>
    <link href="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <url>/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[ <h2>浏览器运行原理</h2>    <br>    <h3 id="section1">1.浏览器简化结构图</h3> <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="">    <br>    <h3 id="section2">2.浏览器内核</h3>    <br>    <ul type="square">        <li>常见浏览器:IE、Edge、Firefox、Chrome、Safari、Opera</li>        <li>浏览器内核分成两部分：渲染引擎和JS引擎</li>        <li type="circle">渲染引擎:对HTML文档进行解析并将其显示在页面上的工具</li>        <li type="circle">由于js引擎越来越独立，内核就倾向于只指渲染引擎</li>    </ul>  <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png" class="">    <h3 id="section3">3.浏览器是如何工作的</h3>    <br>    <p><strong>1.进程和线程</strong></p>    <p>进程是操作系统进行资源分配和调度的基本单元,可以申请和拥有计算机资源,进程是程序的基本执行实体。</p>    <p>线程是操作系统能够进行运算调度的最小单位,一个进程中可以并发多个线程,每条线程并行执行不同的任务。</p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B.png" class="">    <ul type="square">        <li>线程之间可以互相通信，交换数据</li>        <li>进程之间相对独立，并且内存也相对独立互不干扰</li>        <li>若进程之间需要相互通信，需要借用IPC（通信管道）</li>    </ul>    <br>    <p><strong>2.早期浏览器结构</strong></p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%97%A9%E6%9C%9F%E6%B5%8F%E8%A7%88%E5%99%A8.png" class="">    <ol>        <li style="color: chocolate;">不稳定 因为：其中一个线程的卡死可能会导致整个进程出问题，比如你打开一个标签页，其中一个标签页卡死可能会导致整个浏览器无法运行。</li>        <li style="color: chocolate;">不安全 因为：浏览器线程之间是可以共享数据的，那JS线程岂不是可以随意访问浏览器进程内的所有数据。</li>        <li style="color: chocolate;">不流畅 因为：一个进程需要负责太多事情，会导致运行效率问题。</li>    </ol>    <br>    <p><strong>3.现代浏览器结构</strong></p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%93%E6%9E%84.png" class="">    <ol type="i" style="background-color: blanchedalmond;">        <li>浏览器进程负责控制，Chrome浏览器除标签页外的用户界面，包括包括地址栏、书签、后退和前进按钮，以及负责与浏览器的其他进程协调工作。</li>        <li>网络进程负责发起接受网络请求</li>        <li>GPU进程负责整个浏览器界面的渲染</li>        <li>插件进程负责控制网站使用的所有插件，例如flash</li>        <li>渲染器进程用来控制显示tab标签内的所有内容</li>    </ol>    <br>    <h3 id="section4"><strong>4.在浏览器中搜索内容时，浏览器内部发生了什么</strong></h3>    <br>    <span>相关词释义：</span>    <ul style="font-family:cursive">        <li style="font-size: large;">DOM就是文档对象模型，是浏览器对页面在其内部的表示形式</li>        <li style="font-size: large;">layout树上的每个节点都记录了（X,Y）坐标和边框尺寸。</li>        <li style="font-size: large;">绘制记录表记录了会绘制的顺序（类似于图层）</li>        <li style="font-size: large;">Layer树是分层树，记录层级</li>        <li style="font-size: large;">draw quads是图块信息</li>    </ul>    <br>    <a href="https://gagjcxhxrb.feishu.cn/docx/VlWidsVZeoX8ySxACJRcN3P8njz?openbrd=1&doc_app_id=501&blockId=KINodiA1to1oLFxJUwbcONpynuf&blockType=whiteboard&blockToken=Rrotw6LkMhpnobbpATfcGnPYnWg#KINodiA1to1oLFxJUwbcONpynuf"        target="_blank">详细的浏览器内部进程</a>    <p style="font-size: larger;" style="font-weight: 600;">浏览器内部主要的进程</p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%B8%B2%E6%9F%93%E5%99%A8.png" class="">    <p><strong>内部进程具体的过程</strong></p>    <div style="border: #e5b832 solid 2px;">        <ol>        <li>浏览器进程中的网络线程请求获取到html数据后，通过IPC将数据传给渲染器进程的主线程</li>        <li>数据在主线程中经过解析来构造DOM树</li>        <li>css代码进行样式计算，使得DOM树得各个节点拥有各自的样式</li>        <li>根据DOM树和省城好的样式生成器layout树</li>        <li>通过遍历Layout树生成绘制顺序表</li>        <li>接着遍历Layout树生成了Layer树</li>        <li>主线程将layer树和绘制顺序表的信息一起传给合成器线程</li>        <li>合成器线程分图层，并将图层分为更小的图块，将其传给栅格化线程</li>        <li>栅格化线程进行栅格化</li>        <li>栅格化完成后，合成器线程得到栅格化线程传过去的图块信息（drawquads）</li>        <li>根据图块信息，合成器线程合成一个合成器帧，然后将其通过IPC传回浏览器进程</li>        <li>浏览器进程再将合成器帧传到GPU进行渲染</li>    </ol>    </div>        <br>    <p>布局、绘制和JS执行都是在主线程运行的，当在一帧的时间内布局和绘制结束后，如果还有剩余时间，JS就会拿到主线程的使用权，进而解析和执行JS代码。</p>    <p>如果在一帧的时间内未能解析并执行完js代码，则会造成一帧的卡顿。并且在解析和执行完js代码后，使用权才会由js代码变为主线程</p>    <br>    <h3 id="section5"><strong>5.回流（重排）和重绘</strong></h3>    <p>重绘 （Redraw）：某些元素的外观被改变所触发的浏览器行为（重新计算节点在屏幕中的绝对位置并渲染的过程）。</p>    <p>例如：修改元素的填充颜色，会触发重绘。</p>    <p>回流（重排）（Reflow）：重新生成布局，重新排列元素（重新计算各节点和css具体的大小和位置：渲染树需要重新计算所有受影响的节点）。</p>    <p>例如：改元素的宽高，会触发重排。</p>    <h4>通过两者概念区别明显得知，重排要比重绘的成本大得多，我们应该尽量减少重排操作，减少页面性能消耗</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Html基础知识</title>
    <link href="/2024/02/28/Html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/02/28/Html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-网页的构成"><a href="#1-网页的构成" class="headerlink" title="1.网页的构成"></a>1.网页的构成</h2><p>网页一般由三部分组成，分别是HTML（超文本标记语言）、CSS<strong>（层叠样式表）</strong>和JavaScript<strong>（简称“JS”动态脚本语言）</strong>，它们三者在网页中分别承担着不同的任务。</p><ul><li><strong>HTML 负责定义网页的内容</strong></li><li><strong>CSS 负责描述网页的布局</strong></li><li><strong>JavaScript负责网页的行为</strong></li></ul><h2 id="2-常用html元素"><a href="#2-常用html元素" class="headerlink" title="2.常用html元素"></a>2.常用html元素</h2><h4 id="标签标题"><a href="#标签标题" class="headerlink" title="标签标题"></a><strong>标签标题</strong></h4><p>作为标题使用，并且依据重要性递减（h1,h2….h6）</p><h4 id="换行标签和水平分割线标签"><a href="#换行标签和水平分割线标签" class="headerlink" title="换行标签和水平分割线标签"></a><strong>换行标签和水平分割线标签</strong></h4><ul><li>换行:&lt;br&#x2F;&gt;文本强制换行显示</li><li>水平分隔线：&lt;hr&#x2F;&gt; 插入水平分隔线</li></ul><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a><strong>文本格式化标签</strong></h4><table><thead><tr><th align="left"><strong>加粗</strong></th><th align="center">&lt;strong&gt;&lt;&#x2F;strong&gt;</th><th align="right">&lt;b&gt;&lt;&#x2F;b&gt;</th></tr></thead><tbody><tr><td align="left"><strong>倾斜</strong></td><td align="center">&lt;em&gt;&lt;&#x2F;em&gt;</td><td align="right">&lt;i&gt;&lt;&#x2F;i&gt;</td></tr><tr><td align="left"><strong>删除线</strong></td><td align="center">&lt;del&gt;&lt;&#x2F;del&gt;</td><td align="right">&lt;s&gt;&lt;&#x2F;s&gt;</td></tr><tr><td align="left"><strong>下划线</strong></td><td align="center">&lt;ins&gt;&lt;&#x2F;ins&gt;</td><td align="right">&lt;u&gt;&lt;&#x2F;u&gt;</td></tr></tbody></table><h4 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a><strong>盒子标签</strong></h4><ul><li>&lt;div&gt;&lt;&#x2F;div&gt;一行只能放一个（块元素）</li><li>&lt;span&gt;&lt;&#x2F;span&gt;一行可以放多个（行内元素）</li></ul><h4 id="图像标签（单标签）"><a href="#图像标签（单标签）" class="headerlink" title="图像标签（单标签）"></a><strong>图像标签（单标签）</strong></h4><p>&lt;img&#x2F;&gt;</p><table><thead><tr><th align="left">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">src</td><td align="center">图片</td><td align="center">必须属性</td></tr><tr><td align="left">alt</td><td align="center">文本</td><td align="center">替换文本。图像不能显示时的文字</td></tr><tr><td align="left">title</td><td align="center">文本</td><td align="center">提示文本。鼠标放到图像上，显示的文字</td></tr><tr><td align="left">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="left">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="left">border</td><td align="center">像素</td><td align="center">设置图像的边框粗细</td></tr></tbody></table><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p><strong>&lt;a href&#x3D;”跳转目标” target&#x3D;”目标窗口的弹出方式”&gt;文本或图像</a></strong></p><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a><strong>表格标签</strong></h4><p><strong>常用属性</strong></p><ul style="list-style-type: circle;"><li>border：表示表格的边框宽度，单位是像素，即px；</li><li> rowspan：表示多行合并，可以指定具体要合并的行数；(不要忘记删除多余的单元格)</li><li> colspan：表示多列合并，可以指定具体要合并的列数；(不要忘记删除多余的单元格)</li><li>  cellpadding：表示单元格边缘与其单元格内容之间的空白间距；</li><li>cellspacing：表示单元格之间的空白间距；</li><li>width：表示表格的宽度；</li><li>align：表示表格相对周围元素的对齐方式。</li></ul><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ul style="list-style-type: circle;"><li><strong>无序列表：使用&ltul>标签，里面放着&ltli>标签，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。&ltul>&lt/ul>中只能嵌套&ltli>标签&ltli>&lt/li>中可以放任何标签。</strong><p>type属性可以指定列表项的符号类型，如：disc（默认）：小圆点，circle：空心圆圈，square：方块</p></li><li><strong>使用&ltol>标签，里面放着&ltli>标签，列表项目使用数字进行标记&ltol>&lt/ol>中只能嵌套&ltli>标签</strong><p>type属性可以指定列表项的符号类型，如：i：罗马数字开始start属性，指定起始编号。</p></li><li><strong>自定义列表：使用&ltdl>标签，&ltdt>标签用来定义项目/名字，&ltdd>描述每一个项目/名字</strong><p>&ltdl>&lt/dl>只能包含&ltdt>和&ltdd></p></li></ul><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a><strong>表单标签</strong></h4><p>标签的常用属性：</p><table><thead><tr><th align="left">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">type</td><td align="center">见下表</td><td align="center">用于设置标签的不同形式</td></tr><tr><td align="left">value</td><td align="center">用户自定义</td><td align="center">设置input元素的默认值</td></tr></tbody></table><p>标签type属性值：</p><table><thead><tr><th align="left">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">button</td><td align="center">定义可点击按钮</td></tr><tr><td align="left">checkbox</td><td align="center">定义复选框，一组复选框name属性必须相同</td></tr><tr><td align="left">password</td><td align="center">定义密码字段，该字段中的字符被掩码</td></tr><tr><td align="left">radio</td><td align="center">定义单选按钮，一组单选按钮的name属性值必须相同</td></tr><tr><td align="left">reset</td><td align="center">定义重置按钮，清除表单中的所有数据</td></tr><tr><td align="left">submit</td><td align="center">定义提交按钮，提交到action属性指定的地址</td></tr><tr><td align="left">text</td><td align="center">定义单行的输入字段，用户可在其中输入文本，默认宽度为20字符</td></tr></tbody></table><h2 id="分类（元素显示模式）"><a href="#分类（元素显示模式）" class="headerlink" title="分类（元素显示模式）"></a>分类（元素显示模式）</h2><table><thead><tr><th align="left">元素模式</th><th align="center">元素排列</th><th align="center">设置样式</th><th align="center">默认宽度</th><th align="center">包含</th></tr></thead><tbody><tr><td align="left">块级元素</td><td align="center">一行只能放一个</td><td align="center">可以设置宽度高度</td><td align="center">容器的100%</td><td align="center"><ul><li>标题标签：h1, h2, h3, h4, h5, h6</li><li>段落标签：p</li><li>换行标签：br</li><li>水平分隔符标签：hr</li><li>div</li><li>…</li></ul></td></tr><tr><td align="left">行内元素</td><td align="center">一行可以放多个</td><td align="center">不可以直接设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"><ul><li>span</li><li>图像标签：img</li><li>文本格式化标签：i, em</li><li>输入标签：input</li><li>…</li></ul></td></tr><tr><td align="left">行内块元素</td><td align="center">一行可以放多个</td><td align="center">可以设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2024/02/27/hello-world/"/>
    <url>/2024/02/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
