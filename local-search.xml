<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javascript进阶</title>
    <link href="/2024/09/21/javascript%E8%BF%9B%E9%98%B6/"/>
    <url>/2024/09/21/javascript%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1.作用域"></a>1.作用域</h2><h3 id="1-1编译原理"><a href="#1-1编译原理" class="headerlink" title="1.1编译原理"></a>1.1编译原理</h3><p><strong>传统编译语言</strong></p><ul><li><p>分词&#x2F;词法分析</p><p>这个过程将由字符组成的字符串分解成有意义的代码块，这些代码块被称为词法单元。例如。var a&#x3D;2；这段代码会被分解为var，a，&#x3D;，2；空格是否会被当成词法单元取决于空格在这门语言中是否有意义</p><blockquote><p>[!IMPORTANT]</p><p>分词和词法解析之间的区别是非常微妙，晦涩的。主要差异在于 <strong>词法单元的识别是通过有状态还是无状态的方式进行的。</strong>简单来说，如果词法单元生成器在判断a是一个独立的词法单元还是其他词法单元的一部分时，调用的是有状态的解析规则，那么这个过程就被称为词法分析</p></blockquote></li><li><p>解析&#x2F;语法分析</p></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小白学习vue3</title>
    <link href="/2024/06/13/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0vue3/"/>
    <url>/2024/06/13/%E5%B0%8F%E7%99%BD%E5%AD%A6%E4%B9%A0vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs&#x2F;core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="images/1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /></li></ul><h2 id="1-1-【性能的提升】"><a href="#1-1-【性能的提升】" class="headerlink" title="1.1. 【性能的提升】"></a>1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】"><a href="#1-2-【-源码的升级】" class="headerlink" title="1.2.【 源码的升级】"></a>1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】"><a href="#1-3-【拥抱TypeScript】" class="headerlink" title="1.3. 【拥抱TypeScript】"></a>1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】"><a href="#1-4-【新的特性】" class="headerlink" title="1.4. 【新的特性】"></a>1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】"><a href="#2-1-【基于-vue-cli-创建】" class="headerlink" title="2.1. 【基于 vue-cli 创建】"></a>2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue <span class="hljs-literal">--version</span><br><br><span class="hljs-comment">## 安装或者升级你的@vue/cli </span><br>npm install <span class="hljs-literal">-g</span> @vue/<span class="hljs-built_in">cli</span><br><br><span class="hljs-comment">## 执行创建命令</span><br>vue create vue_test<br><br><span class="hljs-comment">##  随后选择3.x</span><br><span class="hljs-comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="hljs-comment">##  &gt; 3.x</span><br><span class="hljs-comment">##    2.x</span><br><br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐"><a href="#2-2-【基于-vite-创建】-推荐" class="headerlink" title="2.2. 【基于 vite 创建】(推荐)"></a>2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="images/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" />    <img src="images/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 1.创建命令</span><br>npm create vue@latest<br><br><span class="hljs-comment">## 2.具体配置</span><br><span class="hljs-comment">## 配置项目名称</span><br>√ Project name: vue3_test<br><span class="hljs-comment">## 是否添加TypeScript支持</span><br>√ Add TypeScript?  Yes<br><span class="hljs-comment">## 是否添加JSX支持</span><br>√ Add JSX Support?  No<br><span class="hljs-comment">## 是否添加路由环境</span><br>√ Add Vue Router <span class="hljs-keyword">for</span> Single Page Application development?  No<br><span class="hljs-comment">## 是否添加pinia环境</span><br>√ Add Pinia <span class="hljs-keyword">for</span> state management?  No<br><span class="hljs-comment">## 是否添加单元测试</span><br>√ Add Vitest <span class="hljs-keyword">for</span> Unit Testing?  No<br><span class="hljs-comment">## 是否添加端到端测试方案</span><br>√ Add an <span class="hljs-keyword">End</span><span class="hljs-literal">-to-End</span> Testing Solution? » No<br><span class="hljs-comment">## 是否添加ESLint语法检查</span><br>√ Add ESLint <span class="hljs-keyword">for</span> code quality?  Yes<br><span class="hljs-comment">## 是否添加Prettiert代码格式化</span><br>√ Add Prettier <span class="hljs-keyword">for</span> code formatting?  No<br></code></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h1&gt;你好啊！&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;App&#x27; //组件名<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>  .app &#123;<br>    background-color: #ddd;<br>    box-shadow: 0 0 10px;<br>    border-radius: 10px;<br>    padding: 20px;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="images/volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="images/image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li></ul><h2 id="2-3-【一个简单的效果】"><a href="#2-3-【一个简单的效果】" class="headerlink" title="2.3. 【一个简单的效果】"></a>2.3. 【一个简单的效果】</h2><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;App&#x27;,<br>    data() &#123;<br>      return &#123;<br>        name:&#x27;张三&#x27;,<br>        age:18,<br>        tel:&#x27;13888888888&#x27;<br>      &#125;<br>    &#125;,<br>    methods:&#123;<br>      changeName()&#123;<br>        this.name = &#x27;zhang-san&#x27;<br>      &#125;,<br>      changeAge()&#123;<br>        this.age += 1<br>      &#125;,<br>      showTel()&#123;<br>        alert(this.tel)<br>      &#125;<br>    &#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】"><a href="#3-1-【OptionsAPI-与-CompositionAPI】" class="headerlink" title="3.1.  【OptionsAPI 与 CompositionAPI】"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li></ul><h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="images/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="images/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="images/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="images/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】"><a href="#3-2-【拉开序幕的-setup】" class="headerlink" title="3.2. 【拉开序幕的 setup】"></a>3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong>_<strong>”</strong>_，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;Person&#x27;,<br>    setup()&#123;<br>      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）<br>      let name = &#x27;张三&#x27;<br>      let age = 18<br>      let tel = &#x27;13888888888&#x27;<br><br>      // 方法，原来写在methods中<br>      function changeName()&#123;<br>        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的<br>        console.log(name)<br>      &#125;<br>      function changeAge()&#123;<br>        age += 1 //注意：此时这么修改age页面是不变化的<br>        console.log(age)<br>      &#125;<br>      function showTel()&#123;<br>        alert(tel)<br>      &#125;<br><br>      // 返回一个对象，对象中的内容，模板中可以直接使用<br>      return &#123;name,age,tel,changeName,changeAge,showTel&#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3><ul><li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用<strong>（重点关注）。</strong></li><li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span> <span class="hljs-string">&#x27;你好啊！&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3><ul><li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li><li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</li><li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li></ul><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;Person&#x27;,<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;!-- 下面的写法是setup语法糖 --&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>  console.log(this) //undefined<br>  <br>  // 数据（注意：此时的name、age、tel都不是响应式数据）<br>  let name = &#x27;张三&#x27;<br>  let age = 18<br>  let tel = &#x27;13888888888&#x27;<br><br>  // 方法<br>  function changName()&#123;<br>    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的<br>  &#125;<br>  function changAge()&#123;<br>    console.log(age)<br>    age += 1 //注意：此时这么修改age页面是不变化的<br>  &#125;<br>  function showTel()&#123;<br>    alert(tel)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li><p>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></p></li><li><p>第二步：<code>vite.config.ts</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueSetupExtend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-vue-setup-extend&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [ <span class="hljs-title class_">VueSetupExtend</span>() ]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></p></li></ol><h2 id="3-3-【ref-创建：基本类型的响应式数据】"><a href="#3-3-【ref-创建：基本类型的响应式数据】" class="headerlink" title="3.3. 【ref 创建：基本类型的响应式数据】"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2><ul><li><strong>作用：</strong>定义响应式变量。</li><li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li><li><strong>返回值：</strong>一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li><li><strong>注意点：</strong><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br>  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。<br>  let name = ref(&#x27;张三&#x27;)<br>  let age = ref(18)<br>  // tel就是一个普通的字符串，不是响应式的<br>  let tel = &#x27;13888888888&#x27;<br><br>  function changeName()&#123;<br>    // JS中操作ref对象时候需要.value<br>    name.value = &#x27;李四&#x27;<br>    console.log(name.value)<br><br>    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。<br>    // name = ref(&#x27;zhang-san&#x27;)<br>  &#125;<br>  function changeAge()&#123;<br>    // JS中操作ref对象时候需要.value<br>    age.value += 1 <br>    console.log(age.value)<br>  &#125;<br>  function showTel()&#123;<br>    alert(tel)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-4-【reactive-创建：对象类型的响应式数据】"><a href="#3-4-【reactive-创建：对象类型的响应式数据】" class="headerlink" title="3.4. 【reactive 创建：对象类型的响应式数据】"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2><ul><li><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li><li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li><li><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</li><li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;<br>    &lt;h2&gt;游戏列表：&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;<br>    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;<br>    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;<br><br>// 数据<br>let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)<br>let games = reactive([<br>  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;<br>])<br>let obj = reactive(&#123;<br>  a:&#123;<br>    b:&#123;<br>      c:&#123;<br>        d:666<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br>function changeCarPrice() &#123;<br>  car.price += 10<br>&#125;<br>function changeFirstGame() &#123;<br>  games[0].name = &#x27;流星蝴蝶剑&#x27;<br>&#125;<br>function test()&#123;<br>  obj.a.b.c.d = 999<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-5-【ref-创建：对象类型的响应式数据】"><a href="#3-5-【ref-创建：对象类型的响应式数据】" class="headerlink" title="3.5. 【ref 创建：对象类型的响应式数据】"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2><ul><li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li><li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;<br>    &lt;h2&gt;游戏列表：&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;<br>    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;<br>    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br><br>// 数据<br>let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)<br>let games = ref([<br>  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;<br>])<br>let obj = ref(&#123;<br>  a:&#123;<br>    b:&#123;<br>      c:&#123;<br>        d:666<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br>console.log(car)<br><br>function changeCarPrice() &#123;<br>  car.value.price += 10<br>&#125;<br>function changeFirstGame() &#123;<br>  games.value[0].name = &#x27;流星蝴蝶剑&#x27;<br>&#125;<br>function test()&#123;<br>  obj.value.a.b.c.d = 999<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-6-【ref-对比-reactive】"><a href="#3-6-【ref-对比-reactive】" class="headerlink" title="3.6. 【ref 对比 reactive】"></a>3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="images/自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：<blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote></li></ul><h2 id="3-7-【toRefs-与-toRef】"><a href="#3-7-【toRefs-与-toRef】" class="headerlink" title="3.7. 【toRefs 与 toRef】"></a>3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)<br>    <br>  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力<br>  let &#123;name,gender&#125; =  toRefs(person)<br>    <br>  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力<br>  let age = toRef(person,&#x27;age&#x27;)<br><br>  // 方法<br>  function changeName()&#123;<br>    name.value += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    age.value += 1<br>  &#125;<br>  function changeGender()&#123;<br>    gender.value = &#x27;女&#x27;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-8-【computed】"><a href="#3-8-【computed】" class="headerlink" title="3.8. 【computed】"></a>3.8. 【computed】</h2><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="images/computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;<br>    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;<br>    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;<br>    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;<br>  import &#123;ref,computed&#125; from &#x27;vue&#x27;<br><br>  let firstName = ref(&#x27;zhang&#x27;)<br>  let lastName = ref(&#x27;san&#x27;)<br><br>  // 计算属性——只读取，不修改<br>  /* let fullName = computed(()=&gt;&#123;<br>    return firstName.value + &#x27;-&#x27; + lastName.value<br>  &#125;) */<br><br><br>  // 计算属性——既读取又修改<br>  let fullName = computed(&#123;<br>    // 读取<br>    get()&#123;<br>      return firstName.value + &#x27;-&#x27; + lastName.value<br>    &#125;,<br>    // 修改<br>    set(val)&#123;<br>      console.log(&#x27;有人修改了fullName&#x27;,val)<br>      firstName.value = val.split(&#x27;-&#x27;)[0]<br>      lastName.value = val.split(&#x27;-&#x27;)[1]<br>    &#125;<br>  &#125;)<br><br>  function changeFullName()&#123;<br>    fullName.value = &#x27;li-si&#x27;<br>  &#125; <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-9-【watch】"><a href="#3-9-【watch】" class="headerlink" title="3.9.【watch】"></a>3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：<blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote></li></ul><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;<br>    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let sum = ref(0)<br>  // 方法<br>  function changeSum()&#123;<br>    sum.value += 1<br>  &#125;<br>  // 监视，情况一：监视【ref】定义的【基本类型】数据<br>  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)<br>    if(newValue &gt;= 10)&#123;<br>      stopWatch()<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let person = ref(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.value.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.value.age += 1<br>  &#125;<br>  function changePerson()&#123;<br>    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;<br>  &#125;<br>  /* <br>    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视<br>    watch的第一个参数是：被监视的数据<br>    watch的第二个参数是：监视的回调<br>    watch的第三个参数是：配置对象（deep、immediate等等.....） <br>  */<br>  watch(person,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br>  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;<br>    &lt;hr&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18<br>  &#125;)<br>  let obj = reactive(&#123;<br>    a:&#123;<br>      b:&#123;<br>        c:666<br>      &#125;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changePerson()&#123;<br>    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)<br>  &#125;<br>  function test()&#123;<br>    obj.a.b.c = 888<br>  &#125;<br><br>  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的<br>  watch(person,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person变化了&#x27;,newValue,oldValue)<br>  &#125;)<br>  watch(obj,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18,<br>    car:&#123;<br>      c1:&#x27;奔驰&#x27;,<br>      c2:&#x27;宝马&#x27;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changeC1()&#123;<br>    person.car.c1 = &#x27;奥迪&#x27;<br>  &#125;<br>  function changeC2()&#123;<br>    person.car.c2 = &#x27;大众&#x27;<br>  &#125;<br>  function changeCar()&#123;<br>    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;<br>  &#125;<br><br>  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式<br>  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)<br>  &#125;) */<br><br>  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数<br>  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18,<br>    car:&#123;<br>      c1:&#x27;奔驰&#x27;,<br>      c2:&#x27;宝马&#x27;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changeC1()&#123;<br>    person.car.c1 = &#x27;奥迪&#x27;<br>  &#125;<br>  function changeC2()&#123;<br>    person.car.c2 = &#x27;大众&#x27;<br>  &#125;<br>  function changeCar()&#123;<br>    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;<br>  &#125;<br><br>  // 监视，情况五：监视上述的多个数据<br>  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】"><a href="#3-10-【watchEffect】" class="headerlink" title="3.10. 【watchEffect】"></a>3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;<br>    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let temp = ref(0)<br>  let height = ref(0)<br><br>  // 方法<br>  function changePrice()&#123;<br>    temp.value += 10<br>  &#125;<br>  function changeSum()&#123;<br>    height.value += 1<br>  &#125;<br><br>  // 用watch实现，需要明确的指出要监视：temp、height<br>  watch([temp,height],(value)=&gt;&#123;<br>    // 从value中获取最新的temp值、height值<br>    const [newTemp,newHeight] = value<br>    // 室温达到50℃，或水位达到20cm，立刻联系服务器<br>    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;<br>      console.log(&#x27;联系服务器&#x27;)<br>    &#125;<br>  &#125;)<br><br>  // 用watchEffect实现，不用<br>  const stopWtach = watchEffect(()=&gt;&#123;<br>    // 室温达到50℃，或水位达到20cm，立刻联系服务器<br>    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;<br>      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)<br>      console.log(&#x27;联系服务器&#x27;)<br>    &#125;<br>    // 水温达到100，或水位达到50，取消监视<br>    if(temp.value === 100 || height.value === 50)&#123;<br>      console.log(&#x27;清理了&#x27;)<br>      stopWtach()<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】"><a href="#3-11-【标签的-ref-属性】" class="headerlink" title="3.11. 【标签的 ref 属性】"></a>3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;<br>    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;<br>    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;<br>    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;<br>    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br>    <br>  let title1 = ref()<br>  let title2 = ref()<br>  let title3 = ref()<br><br>  function showLog()&#123;<br>    // 通过id获取元素<br>    const t1 = document.getElementById(&#x27;title1&#x27;)<br>    // 打印内容<br>    console.log((t1 as HTMLElement).innerText)<br>    console.log((&lt;HTMLElement&gt;t1).innerText)<br>    console.log(t1?.innerText)<br>    <br>        /************************************/<br>        <br>    // 通过ref获取元素<br>    console.log(title1.value)<br>    console.log(title2.value)<br>    console.log(title3.value)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 父组件App.vue --&gt;<br>&lt;template&gt;<br>  &lt;Person ref=&quot;ren&quot;/&gt;<br>  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import Person from &#x27;./components/Person.vue&#x27;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br><br>  let ren = ref()<br><br>  function test()&#123;<br>    console.log(ren.value.name)<br>    console.log(ren.value.age)<br>  &#125;<br>&lt;/script&gt;<br><br><br>&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;<br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;<br>    // 数据<br>  let name = ref(&#x27;张三&#x27;)<br>  let age = ref(18)<br>  /****************************/<br>  /****************************/<br>  // 使用defineExpose将组件中的数据交给外部<br>  defineExpose(&#123;name,age&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-12-【props】"><a href="#3-12-【props】" class="headerlink" title="3.12. 【props】"></a>3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&gt;<span class="hljs-comment">// 定义一个接口，限制每个Person对象的格式</span><br><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">PersonInter</span> &#123;<br> <span class="hljs-attr">id</span>:string,<br> <span class="hljs-attr">name</span>:string,<br>    <span class="hljs-attr">age</span>:number<br>   &#125;<br>   <br><span class="hljs-comment">// 定义一个自定义类型Persons</span><br><span class="hljs-keyword">export</span> type <span class="hljs-title class_">Persons</span> = <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">PersonInter</span>&gt;<br></code></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&gt;&lt;template&gt;<br>    &lt;Person :list=&quot;persons&quot;/&gt;<br>&lt;/template&gt;<br>  <br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import Person from &#x27;./components/Person.vue&#x27;<br>  import &#123;reactive&#125; from &#x27;vue&#x27;<br>    import &#123;type Persons&#125; from &#x27;./types&#x27;<br>  <br>    let persons = reactive&lt;Persons&gt;([<br>     &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,<br>      &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,<br>       &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;<br>     ])<br>   &lt;/script&gt;<br>  <br></code></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&gt;&lt;template&gt;<br>&lt;div class=&quot;person&quot;&gt;<br> &lt;ul&gt;<br>     &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;<br>        &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>   &lt;/div&gt;<br>   &lt;/template&gt;<br>  <br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123;defineProps&#125; from &#x27;vue&#x27;<br>import &#123;type PersonInter&#125; from &#x27;@/types&#x27;<br>  <br>  // 第一种写法：仅接收<br>// const props = defineProps([&#x27;list&#x27;])<br>  <br>  // 第二种写法：接收+限制类型<br>// defineProps&lt;&#123;list:Persons&#125;&gt;()<br>  <br>  // 第三种写法：接收+限制类型+指定默认值+限制必要性<br>let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;<br>     list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]<br>  &#125;)<br>   console.log(props)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】"><a href="#3-13-【生命周期】" class="headerlink" title="3.13. 【生命周期】"></a>3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- vue3写法 --&gt;<br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123; <br>    ref, <br>    onBeforeMount, <br>    onMounted, <br>    onBeforeUpdate, <br>    onUpdated, <br>    onBeforeUnmount, <br>    onUnmounted <br>  &#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let sum = ref(0)<br>  // 方法<br>  function changeSum() &#123;<br>    sum.value += 1<br>  &#125;<br>  console.log(&#x27;setup&#x27;)<br>  // 生命周期钩子<br>  onBeforeMount(()=&gt;&#123;<br>    console.log(&#x27;挂载之前&#x27;)<br>  &#125;)<br>  onMounted(()=&gt;&#123;<br>    console.log(&#x27;挂载完毕&#x27;)<br>  &#125;)<br>  onBeforeUpdate(()=&gt;&#123;<br>    console.log(&#x27;更新之前&#x27;)<br>  &#125;)<br>  onUpdated(()=&gt;&#123;<br>    console.log(&#x27;更新完毕&#x27;)<br>  &#125;)<br>  onBeforeUnmount(()=&gt;&#123;<br>    console.log(&#x27;卸载之前&#x27;)<br>  &#125;)<br>  onUnmounted(()=&gt;&#123;<br>    console.log(&#x27;卸载完毕&#x27;)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】"><a href="#3-14-【自定义hook】" class="headerlink" title="3.14. 【自定义hook】"></a>3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;ref,onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    sum.<span class="hljs-property">value</span> += <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">decrement</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    sum.<span class="hljs-property">value</span> -= <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">increment</span>()<br>  &#125;)<br><br>  <span class="hljs-comment">//向外部暴露数据</span><br>  <span class="hljs-keyword">return</span> &#123;sum,increment,decrement&#125;<br>&#125;        <br></code></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;reactive,onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> axios,&#123;<span class="hljs-title class_">AxiosError</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> dogList = reactive&lt;string[]&gt;([])<br><br>  <span class="hljs-comment">// 方法</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDog</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 发请求</span><br>      <span class="hljs-keyword">let</span> &#123;data&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)<br>      <span class="hljs-comment">// 维护数据</span><br>      dogList.<span class="hljs-title function_">push</span>(data.<span class="hljs-property">message</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-comment">// 处理错误</span><br>      <span class="hljs-keyword">const</span> err = &lt;<span class="hljs-title class_">AxiosError</span>&gt;error<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 挂载钩子</span><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">getDog</span>()<br>  &#125;)<br>    <br>  <span class="hljs-comment">//向外部暴露数据</span><br>  <span class="hljs-keyword">return</span> &#123;dogList,getDog&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;<br>  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;<br>  &lt;hr&gt;<br>  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; <br>  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;<br>  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  import &#123;defineComponent&#125; from &#x27;vue&#x27;<br><br>  export default defineComponent(&#123;<br>    name:&#x27;App&#x27;,<br>  &#125;)<br>&lt;/script&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>  import useSum from &#x27;./hooks/useSum&#x27;<br>  import useDog from &#x27;./hooks/useDog&#x27;<br>    <br>  let &#123;sum,increment,decrement&#125; = useSum()<br>  let &#123;dogList,getDog&#125; = useDog()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-【对路由的理解】"><a href="#4-1-【对路由的理解】" class="headerlink" title="4.1. 【对路由的理解】"></a>4.1. 【对路由的理解】</h2><img src="images/image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】"><a href="#4-2-【基本切换效果】" class="headerlink" title="4.2. 【基本切换效果】"></a>4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/News.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/About.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(),<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>        &#125;<br>    ]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br>app.<span class="hljs-title function_">use</span>(router)<br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;<br>    &lt;!-- 导航区 --&gt;<br>    &lt;div class=&quot;navigate&quot;&gt;<br>      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;<br>      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;<br>      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 展示区 --&gt;<br>    &lt;div class=&quot;main-content&quot;&gt;<br>      &lt;RouterView&gt;&lt;/RouterView&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】"><a href="#4-3-【两个注意点】" class="headerlink" title="4.3. 【两个注意点】"></a>4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】"><a href="#4-4-【路由器工作模式】" class="headerlink" title="4.4.【路由器工作模式】"></a>4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>      <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(), <span class="hljs-comment">//history模式</span><br>      <span class="hljs-comment">/******/</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>      <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHashHistory</span>(), <span class="hljs-comment">//hash模式</span><br>      <span class="hljs-comment">/******/</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】"><a href="#4-5-【to的两种写法】" class="headerlink" title="4.5. 【to的两种写法】"></a>4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 第一种：to的字符串写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;<br><br>&lt;!-- 第二种：to的对象写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="4-6-【命名路由】"><a href="#4-6-【命名路由】" class="headerlink" title="4.6. 【命名路由】"></a>4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>:[<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/news&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;<br>&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】"><a href="#4-7-【嵌套路由】" class="headerlink" title="4.7. 【嵌套路由】"></a>4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(),<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/news&#x27;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br>            <span class="hljs-attr">children</span>:[<br>                &#123;<br>                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiang&#x27;</span>,<br>                    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail&#x27;</span>,<br>                    <span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>                &#125;<br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>        &#125;<br>    ]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;<br>&lt;!-- 或 --&gt;<br>&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;news&quot;&gt;<br>    &lt;nav class=&quot;news-list&quot;&gt;<br>      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;<br>        &#123;&#123;news.name&#125;&#125;<br>      &lt;/RouterLink&gt;<br>    &lt;/nav&gt;<br>    &lt;div class=&quot;news-detail&quot;&gt;<br>      &lt;RouterView/&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】"><a href="#4-8-【路由传参】" class="headerlink" title="4.8. 【路由传参】"></a>4.8. 【路由传参】</h2><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;<br>    跳转<br>&lt;/router-link&gt;<br>                <br>&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;<br>&lt;RouterLink <br>  :to=&quot;&#123;<br>    //name:&#x27;xiang&#x27;, //用name也可以跳转<br>    path:&#x27;/news/detail&#x27;,<br>    query:&#123;<br>      id:news.id,<br>      title:news.title,<br>      content:news.content<br>    &#125;<br>  &#125;&quot;<br>&gt;<br>  &#123;&#123;news.title&#125;&#125;<br>&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-comment">// 打印query参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;<br>&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;<br>                <br>&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;<br>&lt;RouterLink <br>  :to=&quot;&#123;<br>    name:&#x27;xiang&#x27;, //用name跳转<br>    params:&#123;<br>      id:news.id,<br>      title:news.title,<br>      content:news.title<br>    &#125;<br>  &#125;&quot;<br>&gt;<br>  &#123;&#123;news.title&#125;&#125;<br>&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-comment">// 打印params参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">params</span>)<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】"><a href="#4-9-【路由的props配置】" class="headerlink" title="4.9. 【路由的props配置】"></a>4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiang&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title/:content&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br>  <span class="hljs-comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-comment">// props:&#123;a:1,b:2,c:3&#125;, </span><br><br>  <span class="hljs-comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span><br>  <span class="hljs-comment">// props:true</span><br>  <br>  <span class="hljs-comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>    <span class="hljs-keyword">return</span> route.<span class="hljs-property">query</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】"><a href="#4-10-【-replace属性】" class="headerlink" title="4.10. 【 replace属性】"></a>4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】"><a href="#4-11-【编程式导航】" class="headerlink" title="4.11. 【编程式导航】"></a>4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute,useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">parmas</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-property">push</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-property">replace</span>)<br></code></pre></td></tr></table></figure><h2 id="4-12-【重定向】"><a href="#4-12-【重定向】" class="headerlink" title="4.12. 【重定向】"></a>4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/about&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1【准备一个效果】"><a href="#5-1【准备一个效果】" class="headerlink" title="5.1【准备一个效果】"></a>5.1【准备一个效果】</h2><img src="./images/pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】"><a href="#5-2【搭建-pinia-环境】" class="headerlink" title="5.2【搭建 pinia 环境】"></a>5.2【搭建 pinia 环境】</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">/* 引入createPinia，用于创建pinia */</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">/* 创建pinia */</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br><span class="hljs-comment">/* 使用插件 */</span>&#123;&#125;<br>app.<span class="hljs-title function_">use</span>(pinia)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】"><a href="#5-3【存储-读取数据】" class="headerlink" title="5.3【存储+读取数据】"></a>5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;&#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">sum</span>:<span class="hljs-number">6</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTalkStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;&#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">talkList</span>:[<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada01&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,<br>             &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada02&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada03&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  // 引入对应的useXxxxxStore    <br>  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;<br>  <br>  // 调用useXxxxxStore得到对应的store<br>  const sumStore = useSumStore()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;ul&gt;<br>    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;<br>      &#123;&#123; talk.content &#125;&#125;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  import axios from &#x27;axios&#x27;<br>  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;<br><br>  const talkStore = useTalkStore()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式"><a href="#5-4-【修改数据】-三种方式" class="headerlink" title="5.4.【修改数据】(三种方式)"></a>5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">countStore.<span class="hljs-property">sum</span> = <span class="hljs-number">666</span><br></code></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">countStore.$patch(&#123;<br>  <span class="hljs-attr">sum</span>:<span class="hljs-number">999</span>,<br>  <span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>  <span class="hljs-comment">/*************/</span><br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">//加</span><br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">value:number</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> &lt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">//操作countStore中的sum</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> += value<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">//减</span><br>    <span class="hljs-title function_">decrement</span>(<span class="hljs-params">value:number</span>)&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> -= value<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">/*************/</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用countStore</span><br><span class="hljs-keyword">const</span> countStore = <span class="hljs-title function_">useCountStore</span>()<br><br><span class="hljs-comment">// 调用对应action</span><br>countStore.<span class="hljs-title function_">incrementOdd</span>(n.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】"><a href="#5-5-【storeToRefs】" class="headerlink" title="5.5.【storeToRefs】"></a>5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;count&quot;&gt;<br>        &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;<br>  /* 引入storeToRefs */<br>  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;<br><br>    /* 得到countStore */<br>  const countStore = useCountStore()<br>  /* 使用storeToRefs转换countStore，随后解构 */<br>  const &#123;sum&#125; = storeToRefs(countStore)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="5-6-【getters】"><a href="#5-6-【getters】" class="headerlink" title="5.6.【getters】"></a>5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-comment">/************/</span><br>  &#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">sum</span>:<span class="hljs-number">1</span>,<br>      <span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;<br>    <span class="hljs-attr">bigSum</span>:(state):<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> state.<span class="hljs-property">sum</span> *<span class="hljs-number">10</span>,<br>    <span class="hljs-title function_">upperSchool</span>():string&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>. school.<span class="hljs-title function_">toUpperCase</span>()<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;increment,decrement&#125; = countStore<br><span class="hljs-keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="hljs-title function_">storeToRefs</span>(countStore)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】"><a href="#5-7-【-subscribe】" class="headerlink" title="5.7.【$subscribe】"></a>5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">talkStore.$subscribe(<span class="hljs-function">(<span class="hljs-params">mutate,state</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;LoveTalk&#x27;</span>,mutate,state)<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(talkList.<span class="hljs-property">value</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】"><a href="#5-8-【store组合式写法】" class="headerlink" title="5.8. 【store组合式写法】"></a>5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123;nanoid&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br><span class="hljs-keyword">import</span> &#123;reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTalkStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">// talkList就是state</span><br>  <span class="hljs-keyword">const</span> talkList = <span class="hljs-title function_">reactive</span>(<br>    <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;talkList&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>) || []<br>  )<br><br>  <span class="hljs-comment">// getATalk函数相当于action</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getATalk</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span><br>    <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">content</span>:title&#125;&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)<br>    <span class="hljs-comment">// 把请求回来的字符串，包装成一个对象</span><br>    <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),title&#125;<br>    <span class="hljs-comment">// 放到数组中</span><br>    talkList.<span class="hljs-title function_">unshift</span>(obj)<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;talkList,getATalk&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="images/image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】"><a href="#6-1-【props】" class="headerlink" title="6.1. 【props】"></a>6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件，&lt;/h3&gt;<br>        &lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;<br>        &lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>    import Child from &#x27;./Child.vue&#x27;<br>    import &#123; ref &#125; from &quot;vue&quot;;<br>    // 数据<br>    const car = ref(&#x27;奔驰&#x27;)<br>    const toy = ref()<br>    // 方法<br>    function getToy(value:string)&#123;<br>        toy.value = value<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;h3&gt;子组件&lt;/h3&gt;<br>        &lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>        &lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;<br>    import &#123; ref &#125; from &quot;vue&quot;;<br>    const toy = ref(&#x27;奥特曼&#x27;)<br>    <br>    defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】"><a href="#6-2-【自定义事件】" class="headerlink" title="6.2. 【自定义事件】"></a>6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 &#x3D;&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）    </li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">send-toy</span>=<span class="hljs-string">&quot;toy = $event&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//子组件中，触发事件：</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;send-toy&#x27;</span>, 具体数据)<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】"><a href="#6-3-【mitt】" class="headerlink" title="6.3. 【mitt】"></a>6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i mitt<br></code></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入mitt </span><br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mitt&quot;</span>;<br><br><span class="hljs-comment">// 创建emitter</span><br><span class="hljs-keyword">const</span> emitter = <span class="hljs-title function_">mitt</span>()<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  // 绑定事件</span><br><span class="hljs-comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span><br><span class="hljs-comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span><br><span class="hljs-comment">  &#125;)</span><br><span class="hljs-comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span><br><span class="hljs-comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span><br><span class="hljs-comment">  &#125;)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  setInterval(() =&gt; &#123;</span><br><span class="hljs-comment">    // 触发事件</span><br><span class="hljs-comment">    emitter.emit(&#x27;abc&#x27;,666)</span><br><span class="hljs-comment">    emitter.emit(&#x27;xyz&#x27;,777)</span><br><span class="hljs-comment">  &#125;, 1000);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">    // 清理事件</span><br><span class="hljs-comment">    emitter.all.clear()</span><br><span class="hljs-comment">  &#125;, 3000); </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 创建并暴露mitt</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> emitter<br></code></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> emitter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/emitter&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">// 绑定事件</span><br>emitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;send-toy事件被触发&#x27;</span>,value)<br>&#125;)<br><br><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">// 解绑事件</span><br>  emitter.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> emitter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/emitter&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendToy</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 触发事件</span><br>  emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>,toy.<span class="hljs-property">value</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】"><a href="#6-4-【v-model】" class="headerlink" title="6.4.【v-model】"></a>6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 使用v-model指令 --&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;<br><br>&lt;!-- v-model的本质是下面这行代码 --&gt;<br>&lt;input <br>  type=&quot;text&quot; <br>  :value=&quot;userName&quot; <br>  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;<br>&gt;<br></code></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 组件标签上使用v-model指令 --&gt;<br>&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;<br><br>&lt;!-- 组件标签上v-model的本质 --&gt;<br>&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;<br></code></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;<br>        &lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;<br>    &lt;input <br>       type=&quot;text&quot; <br>       :value=&quot;modelValue&quot; <br>       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;<br>  // 接收props<br>  defineProps([&#x27;modelValue&#x27;])<br>  // 声明事件<br>  const emit = defineEmits([&#x27;update:model-value&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 也可以更换value，例如改成abc--&gt;<br>&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;<br><br>&lt;!-- 上面代码的本质如下 --&gt;<br>&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;<br></code></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;input <br>       type=&quot;text&quot; <br>       :value=&quot;abc&quot; <br>       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;<br>  // 接收props<br>  defineProps([&#x27;abc&#x27;])<br>  // 声明事件<br>  const emit = defineEmits([&#x27;update:abc&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】"><a href="#6-5-【-attrs-】" class="headerlink" title="6.5.【$attrs 】"></a>6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件&lt;/h3&gt;<br>        &lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>    import Child from &#x27;./Child.vue&#x27;<br>    import &#123; ref &#125; from &quot;vue&quot;;<br>    let a = ref(1)<br>    let b = ref(2)<br>    let c = ref(3)<br>    let d = ref(4)<br><br>    function updateA(value)&#123;<br>        a.value = value<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;child&quot;&gt;<br>        &lt;h3&gt;子组件&lt;/h3&gt;<br>        &lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;<br>    import GrandChild from &#x27;./GrandChild.vue&#x27;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;grand-child&quot;&gt;<br>        &lt;h3&gt;孙组件&lt;/h3&gt;<br>        &lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;<br>        &lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;<br>        &lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;<br>    defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】"><a href="#6-6-【-refs、-parent】" class="headerlink" title="6.6. 【$refs、$parent】"></a>6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】"><a href="#6-7-【provide、inject】" class="headerlink" title="6.7. 【provide、inject】"></a>6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件&lt;/h3&gt;<br>    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;<br>    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;<br>    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;<br>    &lt;Child/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>  import Child from &#x27;./Child.vue&#x27;<br>  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;<br>  // 数据<br>  let money = ref(100)<br>  let car = reactive(&#123;<br>    brand:&#x27;奔驰&#x27;,<br>    price:100<br>  &#125;)<br>  // 用于更新money的方法<br>  function updateMoney(value:number)&#123;<br>    money.value += value<br>  &#125;<br>  // 提供数据<br>  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)<br>  provide(&#x27;car&#x27;,car)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">   &lt;template&gt;<br>     &lt;div class=&quot;grand-child&quot;&gt;<br>       &lt;h3&gt;我是孙组件&lt;/h3&gt;<br>       &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;<br>       &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>       &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;<br>     &lt;/div&gt;<br>   &lt;/template&gt;<br>   <br>   &lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;<br>     import &#123; inject &#125; from &#x27;vue&#x27;;<br>     // 注入数据<br>    let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)<br>     let car = inject(&#x27;car&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】"><a href="#6-8-【pinia】" class="headerlink" title="6.8. 【pinia】"></a>6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】"><a href="#6-9-【slot】" class="headerlink" title="6.9. 【slot】"></a>6.9. 【slot】</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><p><img src="http://49.232.112.44/images/default_slot.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category title=&quot;今日热门游戏&quot;&gt;<br>          &lt;ul&gt;<br>            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>          &lt;/ul&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>          &lt;div class=&quot;item&quot;&gt;<br>            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;<br>            &lt;!-- 默认插槽 --&gt;<br>            &lt;slot&gt;&lt;/slot&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category title=&quot;今日热门游戏&quot;&gt;<br>          &lt;template v-slot:s1&gt;<br>            &lt;ul&gt;<br>              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>            &lt;/ul&gt;<br>          &lt;/template&gt;<br>          &lt;template #s2&gt;<br>            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;<br>          &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>          &lt;div class=&quot;item&quot;&gt;<br>            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;<br>            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;<br>            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>      &lt;Game v-slot=&quot;params&quot;&gt;<br>      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;<br>      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;<br>        &lt;ul&gt;<br>          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br>      &lt;/Game&gt;<br><br>子组件中：<br>      &lt;template&gt;<br>        &lt;div class=&quot;category&quot;&gt;<br>          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;<br>          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br><br>      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;<br>        import &#123;reactive&#125; from &#x27;vue&#x27;<br>        let games = reactive([<br>          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;<br>        ])<br>      &lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】"><a href="#7-1-【shallowRef-与-shallowReactive-】" class="headerlink" title="7.1.【shallowRef 与 shallowReactive 】"></a>7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myVar = <span class="hljs-title function_">shallowRef</span>(initialValue);<br></code></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myObj = <span class="hljs-title function_">shallowReactive</span>(&#123; ... &#125;);<br></code></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】"><a href="#7-2-【readonly-与-shallowReadonly】" class="headerlink" title="7.2.【readonly 与 shallowReadonly】"></a>7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> original = <span class="hljs-title function_">reactive</span>(&#123; ... &#125;);<br><span class="hljs-keyword">const</span> readOnlyCopy = <span class="hljs-title function_">readonly</span>(original);<br></code></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> original = <span class="hljs-title function_">reactive</span>(&#123; ... &#125;);<br><span class="hljs-keyword">const</span> shallowReadOnlyCopy = <span class="hljs-title function_">shallowReadonly</span>(original);<br></code></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】"><a href="#7-3-【toRaw-与-markRaw】" class="headerlink" title="7.3.【toRaw 与 markRaw】"></a>7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问&#x2F;跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">/* toRaw */</span><br><span class="hljs-comment">// 响应式对象</span><br><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tony&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br><span class="hljs-comment">// 原始对象</span><br><span class="hljs-keyword">let</span> rawPerson = <span class="hljs-title function_">toRaw</span>(person)<br><br><br><span class="hljs-comment">/* markRaw */</span><br><span class="hljs-keyword">let</span> citysd = <span class="hljs-title function_">markRaw</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda01&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda02&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda03&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天津&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda04&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;重庆&#x27;</span>&#125;<br>])<br><span class="hljs-comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span><br><span class="hljs-keyword">let</span> citys2 = <span class="hljs-title function_">reactive</span>(citys)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(person))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(rawPerson))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(citys))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(citys2))<br></code></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* markRaw */</span><br><span class="hljs-keyword">let</span> citys = <span class="hljs-title function_">markRaw</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda01&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda02&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda03&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天津&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda04&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;重庆&#x27;</span>&#125;<br>])<br><span class="hljs-comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span><br><span class="hljs-keyword">let</span> citys2 = <span class="hljs-title function_">reactive</span>(citys)<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】"><a href="#7-4-【customRef】" class="headerlink" title="7.4.【customRef】"></a>7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;customRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">initValue:<span class="hljs-built_in">string</span>,delay:<span class="hljs-built_in">number</span></span>)&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">customRef</span>(<span class="hljs-function">(<span class="hljs-params">track,trigger</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>:<span class="hljs-built_in">number</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">track</span>() <span class="hljs-comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span><br>        <span class="hljs-keyword">return</span> initValue<br>      &#125;,<br>      <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          initValue = value<br>          <span class="hljs-title function_">trigger</span>() <span class="hljs-comment">//通知Vue数据msg变化了</span><br>        &#125;, delay);<br>      &#125;<br>    &#125;<br>  &#125;) <br>  <span class="hljs-keyword">return</span> &#123;msg&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>组件中使用：</p><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-【Teleport】"><a href="#8-1-【Teleport】" class="headerlink" title="8.1. 【Teleport】"></a>8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;body&#x27;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是弹窗中的一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-【Suspense】"><a href="#8-2-【Suspense】" class="headerlink" title="8.2. 【Suspense】"></a>8.2. 【Suspense】</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li>异步引入组件</li><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent,<span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app&quot;&gt;<br>        &lt;h3&gt;我是App组件&lt;/h3&gt;<br>        &lt;Suspense&gt;<br>          &lt;template v-slot:default&gt;<br>            &lt;Child/&gt;<br>          &lt;/template&gt;<br>          &lt;template v-slot:fallback&gt;<br>            &lt;h3&gt;加载中.......&lt;/h3&gt;<br>          &lt;/template&gt;<br>        &lt;/Suspense&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】"><a href="#8-3-【全局API转移到应用对象】" class="headerlink" title="8.3.【全局API转移到应用对象】"></a>8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】"><a href="#8-4-【其他】" class="headerlink" title="8.4.【其他】"></a>8.4.【其他】</h2><ul><li><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p></li><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>……</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计网知识（前端须知）</title>
    <link href="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/"/>
    <url>/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="简单须知"><a href="#简单须知" class="headerlink" title="简单须知"></a>简单须知</h2><ol><li>计算机网络：是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。<img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/1.png" class=""></li><li>互联网、因特网、万维网<br>a. 三者关系   <img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/2.png" class="">b.三者介绍<ul><li><code>互联网internet</code>：凡是由能彼此通信的设备组成的网络就叫互联网，即使仅有两台机器（计算机、手机等），不论用何种技术使其彼此通信，都叫互联网，所以，互联网有广域网、城域网及局域网之分。</li><li><code>因特网Internet</code>：<ul><li>互联网中的一种，是由<strong>上千万台设备组成的网络</strong>（该网络具备很大的规模）。因特网使用TCP&#x2F;IP协议让不同的设备可以彼此通信。但使用<strong>TCP&#x2F;IP协议</strong>的网络并不一定是因特网，一个局域网也可以使用TCP&#x2F;IP协议。</li><li><code>TCP/IP协议</code>:由很多协议组成，不同类型的协议又被放在不同的层，因特网提供的服务一般包括有：www(万维网)服务，电子邮件服务，远程登录服务，文件传输服务（FTP），网络电话等等。</li></ul></li><li><code>万维网www</code>：大规模的、联机式的信息存储所，是无数个网络站点和网页的集合。只要<strong>应用层使用的是HTTP协议</strong>，就称为万维网（world wide web），之所以在浏览器里输入百度网址时，能看见百度网提供的网页，就是因为您的个人浏览器和百度网的服务器之间使用的是HTTP协议在交流。</li></ul></li></ol><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><h3 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h3><p>开放式系统互联通信参考模型,简称OSI，将计算机网络体系结构划分为以下7层</p><img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/3.png" class=""><h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h3><img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/4.png" class=""><ul><li><strong>协议</strong>:不同的硬件,操作系统之间的通信,都需要规则,这种规则称为协议。</li><li><strong>TCP&#x2F;IP协议</strong>是互联网基础相关各类协议族的总称，进行通信时，会通过分层顺序和对方进行通信。客户端从应用层往下走，服务器端则从链路层往上走<br>        <img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/5.png" class=""></li><li><strong>TCP&#x2F;IP传输流</strong><br>           <img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/6.png" class=""></li><li><strong>IP协议（网络层）</strong>：通过IP地址，保证了联网设备的唯一性，实现了网络通信的面向无连接和不可靠的传输功能。IP协议只能指明数据包的源目通信方即”这是谁的送给谁的”，但不能保证数据包一定能到达对方，数据是否会被丢弃以及丢弃之后如何处理。</li><li><strong>ARP协议</strong>：寻找MAC地址（链路层）<ul><li>MAC地址是什么呢？简单说来就是两台相邻的路由器A和B，A怎么把数据传给B呢，它总要知道B的物理地址吧，物理地址就像门牌号一样</li></ul></li><li><strong>DNS服务（应用层）</strong>：解析域名为IP地址</li></ul><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h3><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>UDP协议全称是用户数据报协议,在网络中它用于处理数据报,是一种无连接，不可靠，基于报文的协议。<br>特点：</p><ol><li>面向无连接<ul><li>UDP不需要和TCP一样在发送数据前进行3次握手建立连接,想发数据就可以开始发送</li><li>只是数据报文的搬运工,不会对数据报文进行任何拆分和拼接操作</li></ul></li><li>有单播,多播,广播功能<ul><li>不仅支持一对一传输方式,同样支持一对多,多对多,多对一的方式</li></ul></li><li>是面向报文的<ul><li>发送方的UDP对应用程序交下来的报文,在添加首部后就向下交付IP层.不合并拆分,而是保留这些报文边界.因此,应用程序必须选择合适大小的报文</li></ul></li><li>不可靠性<ul><li>通信建立在无连接上,想发就发</li><li>收到什么数据就传递什么数据,不会备份数据,发送数据方也不会关心对方是否正确接收数据</li><li>网络环境时好时坏,但是由于UDP因为没有阻塞控制,一直会以恒定速度发送数据,即使网络条件不好,也不会对发送速率进行调整.</li></ul></li></ol><p>缺点：</p><ul><li>网络条件不好情况下会出现丢包</li></ul><p>优点：</p><ul><li>头部开销小,只有8字节，传输数据报文很高效，实时性要求高的地方有所作为（eg：电话视频会议等）。</li></ul><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP协议全称为传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信。<br>特点：</p><ol><li>面向连接<ul><li>只数据发送之前必须在两端建立连接,建立方法为3次握手,为数据可靠的传输打下基础</li></ul></li><li>仅支持单播传输<ul><li>仅支持一对一数据传输,不支持多播和广播传输方式</li></ul></li><li>可靠传输<ul><li>对于可靠传输,判断丢包,误码靠的是TCP的段编号以及确认编号.</li><li>TCP为了保证报文传输可靠,就给每个包一个序号,同时序号也保证了传送到接收端实体的包的按序接收</li></ul></li><li>提供拥塞控制<ul><li>当网络出现拥塞时,TCP可以减小向网络注入数据的速率和数量,缓解拥塞</li></ul></li><li>TCP提供全双工通信.<ul><li>在两个实体之间可以同时交换数据(发送和接收数据同时发生互不影响）</li></ul></li></ol><p>优点：</p><ul><li>适用于要求可靠传输的应用,例如文件传输</li></ul><h5 id="连接和断开"><a href="#连接和断开" class="headerlink" title="连接和断开"></a>连接和断开</h5><p>连接<br>                    <img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/7.png" class=""><br>断开<br>                    <img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/8.png" class=""></p><ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，也即 FIN 报文，之后客户端进入 FIN_WAIT_1 状态。</li><li>服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSE_WAIT 状态。</li><li>客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态。</li><li>等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态。</li><li>客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态</li><li>服务端收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭。</li><li>客户端在经过 2MSL （最大报文段的生存时间）一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭。</li></ul><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><h4 id="URL和URI"><a href="#URL和URI" class="headerlink" title="URL和URI"></a>URL和URI</h4><p><strong>解释</strong></p><ul><li><strong>URL</strong> 指的是统一资源 <strong>定位符</strong>,是访问WEB网站需要输入的网站地址</li><li><strong>URI</strong>是指统一资源<strong>标识符</strong>,全称为Uniform Resource Identifier,它的作用是区分互联网中的不同资源,比如:HTML,图像,视频,程序等等</li><li><strong>URL是URI的一个子集</strong></li></ul><p><strong>URI格式</strong><br>                    <img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/9.png" class=""></p><ul><li><strong>协议名</strong>:<code>http:或https:</code>表示协议名称,不区分字母大小写,后加上&#x2F;&#x2F;.</li><li><strong>登录信息</strong>:<code>user:@pass</code>表示获取服务器资源的用户和密码.不推荐使用,不安全，不常用</li><li><strong>服务器地址</strong>:<ul><li>以域名形式<code>www.tutu.com</code></li><li>以IPv4形式<code>192.168.0.1</code>地址名;</li><li>以<code>[0:0:0:0:0:0:1]</code>这种方括号括起来的IPv6地址；</li></ul></li><li><strong>服务器端口号</strong>:<code>:8080</code>表示端口号，如果省略端口部分，将采用默认端口80</li><li><strong>文件路径</strong>:<code>/html/index.html</code>表示服务器文件的路径,资源访问位置，域名后的最后一个“&#x2F;”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“&#x2F;”开始到“#”为止，否则是直接到最后</li><li><strong>查询字符串（参数部分）</strong>:<code>?userId=1</code>表示文件路径中的参数 ,?后面以<code>key=value</code>形式,如果后面还需要加参数,用&amp;拼接</li><li>片段标识符:<code>#cn1</code>表示文件中某个位置.即平时网页锚点定位</li></ul><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><ul><li>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网服务器传输超文本到本地浏览器的传送协议。</li><li>工作于客户端-服务端架构,浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。<br></li></ul><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>简单快速<br>a. 客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。<br>b. 由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快      </li><li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol><h5 id="HTTP请求，响应，状态码"><a href="#HTTP请求，响应，状态码" class="headerlink" title="HTTP请求，响应，状态码"></a><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html">HTTP请求，响应，状态码</a></h5><h5 id="与其他协议"><a href="#与其他协议" class="headerlink" title="与其他协议"></a>与其他协议</h5><img src="/2024/03/07/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%EF%BC%88%E5%89%8D%E7%AB%AF%E9%A1%BB%E7%9F%A5%EF%BC%89/10.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js基础</title>
    <link href="/2024/03/06/js%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/06/js%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1.JavaScript简介"></a>1.JavaScript简介</h2><ul><li><p>JavaScript 是一门跨平台、面向对象的脚本语言，它能使网页可交互（例如拥有复杂的动画，可点击的按钮，通俗的菜单等）。另外还有高级的服务端 Javascript 版本，例如 Node.js，它可以让你在网页上添加更多功能，不仅仅是下载文件（例如在多台电脑之间的协同合作）。在宿主环境（例如 web 浏览器）中，JavaScript 能够通过其所连接的环境提供的编程接口进行控制。</p></li><li><p>JavaScript是一种动态弱类型语言</p><table><thead><tr><th align="center">JavaScript</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">面向对象。不区分对象类型。通过原型机制继承，任何对象的属性和方法均可以被动态添加。存放任意类型。</td><td align="center">基于类系统。分为类和实例，通过类层级的定义实现继承。不能动态增加对象或类的属性或方法。存放指定类型。</td></tr><tr><td align="center">变量类型不需要提前声明 (动态类型)。任意时刻存放</td><td align="center">变量类型必须提前声明 (静态类型)。</td></tr><tr><td align="center">不能直接自动写入硬盘</td><td align="center">可以直接自动写入硬盘。</td></tr></tbody></table></li><li><p>如今，JavaScript 已经成为了与 HTML&#x2F;CSS 完全集成的，使用最广泛的浏览器语言。</p></li></ul><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><p>我们可以使用 var、let 或 const 声明变量来存储数据。</p><ul><li>let—现代的变量声明方式。</li><li>var—老旧的变量声明方式。一般情况下，我们不会再使用它。<br><em>（var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined）</em><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br>for (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 10; i++) &#123;</span><br>  a[i] <span class="hljs-operator">=</span> function () &#123;<br>    console.log(i)<span class="hljs-comment">;</span><br>  &#125;<span class="hljs-comment">;</span><br>&#125;<br>a[<span class="hljs-number">6</span>]()<span class="hljs-comment">;//10</span><br>//var声明的变量不具备块级作用域特性，是全局变量<br></code></pre></td></tr></table></figure></li><li>const—类似于let，但是变量的值<strong>无法被修改</strong> 。<div style="border: #e5b832 solid 2px; border-radius: 10px; background-color: antiquewhite; padding: 5px;">变量应当以一种容易理解变量内部是什么的方式进行命名。</div></li></ul><h2 id="3-JavaScript标识符"><a href="#3-JavaScript标识符" class="headerlink" title="3.JavaScript标识符"></a>3.JavaScript标识符</h2><p>所有JavaScript变量必须<strong>以唯一的名称</strong>的标识。<br>这些唯一的名称称为标识符。<br>构造变量名称（唯一标识符）的通用规则是：</p><ul><li>名称可包含字母、数字、下划线和美元符号</li><li>名称也可以以字母，$和_开头</li><li>名称对大小写敏感（y和Y是不同的变量）</li><li>保留字无法用作变量名称</li></ul><p>##数据类型<br>JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 object 为复杂数据类型）。</p><ul><li>Number<ul><li>用于任何类型的数字：整数或浮点数，在 ±(253-1) 范围内的整数。</li></ul></li><li>Bigint<ul><li>用于任意长度的整数。</li></ul></li><li>String<ul><li>用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li></ul></li><li>Boolean<ul><li>用于 true 和 false。</li><li>true不一定等于1,false不一定等于0。</li></ul></li><li>Null<ul><li>用于未知的值 —— 只有一个 null 值的独立类型。</li><li>null是表示一个空对象指针。</li></ul></li><li>Undefined<ul><li>用于未定义的值 —— 只有一个 undefined 值的独立类型。</li><li>在使用var 声明变量但未对其加初始化时，这个变量就是undefined。</li></ul></li><li>Symbol<ul><li>用于唯一的标识符。</li></ul></li><li>Object<ul><li>用于更复杂的数据结构，比如 function、Array、Date。</li></ul></li></ul><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">我们可以通过 typeof 运算符查看存储在变量中的数据类型。</div><br><ul><li>我们可以通过 typeof 运算符查看存储在变量中的数据类型。</li><li>以字符串的形式返回类型名称，例如 “string”。</li><li>typeof null 会返回 “object” —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 object。</li></ul><h2 id="5-值的比较"><a href="#5-值的比较" class="headerlink" title="5.值的比较"></a>5.值的比较</h2><ul><li><p>运算符</p><table><thead><tr><th align="center">等值检测运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;（不相等）</td><td align="center">比较两个操作数的值是否相等</td></tr><tr><td align="center">!&#x3D;（不相等）</td><td align="center">比较两个操作数的值是否不相等</td></tr><tr><td align="center">&#x3D;&#x3D;&#x3D;（全等）</td><td align="center">比较两个操作数的值是否相等，同时检测它们的类型是否相同</td></tr><tr><td align="center">!&#x3D;&#x3D;（不全等）</td><td align="center">比较两个操作数的值是否不相等，同时检测它们的类型是否不相同</td></tr></tbody></table></li><li><p>比较规则</p><p> 1.比较运算符始终返回布尔值。<br> 2.字符串的比较，会按照“词典”顺序逐字符地比较大小。<br> 3.在相等运算中，应注意以下几个问题：</p><ul><li>如果操作数是布尔值，则先转换为数值，其中false转为0，true转换为1。</li><li>果一个操作数是字符串，另一个操作数是数字，则先尝试把字符串转换为数字。</li><li>如果一个操作数是字符串，另一个操作数是对象，则先尝试把对象转换为字符串。</li><li>如果一个操作数是数字，另一个操作数是对象，则先尝试把对象转换为数字。</li><li>如果两个操作数都是对象，则比较引用地址。如果引用地址相同，则相等；否则不等。  <div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">  <ol>  <li>在非严格相等 == 下，null 和 undefined 相等且各自不等于任何其他的值。</li>  <li>NaN与任何值都不相等，包括它自己。任何操作数与NaN比较，都是false</li>  <li>在使用>或&lt进行比较时，需要注意变量可能为 null/undefined 的情况。比较好的方法是单独检查变量是否等于 null/undefined。</li>  </ol>  </div></li></ul></li></ul><h2 id="6-类型转换"><a href="#6-类型转换" class="headerlink" title="6.类型转换"></a>6.类型转换</h2><ol><li><p>显式类型转换<br><br>a. 显式类型转换</p><ul><li><strong>toString()</strong><br>该方法不会影响到原变量，它会将转换的结构返回。但是注意，Null和Undefined没有toString()方法，如果调用它们的方法，则会报错。<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> a.toString()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><strong>String()</strong><br> 将被转换的数据作为参数传递给函数。使用String函数做类型强制转换时，对于Number和Boolean就是调用toString()方法，对于null和undefined，就不会调用toString()方法，它会将null直接转换成”null”，将undefined转换成”undefined”。 <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> String(a)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><p>b.将其他的数据类型转换为Number类型</p><ul><li>Number()<br>   1.如果是纯数字的字符串，则直接将其转换为数字。<br>   2.如果字符串中有非数字的内容，则转换为NaN。<br>   3.布尔类型转换成数字：Ture转成1；False转成0。<br>   4.Null转成数字0。<br>   5.Undefined转成数字NaN。<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>a = <span class="hljs-built_in">Number</span>(a);<span class="hljs-comment">//a:123</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123abc&#x27;</span>;<br>a = <span class="hljs-built_in">Number</span>(a);<span class="hljs-comment">//a:NaN</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>parseInt()，parseFloat()  <div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">针对字符串转换成数字</div></li></ul><ol><li>parseInt()把一个字符串转换为一个整数，只取整数部分；</li><li>parseFloat()把一个字符串转换为一个浮点数，可获得有效小数;</li><li>对非String使用parseInt()或parseFloat()，它会将其转换为String.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123abc&#x27;</span>,<br><span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;12.34.56ab&#x27;</span>;<br>a = <span class="hljs-built_in">parseInt</span>(a);<span class="hljs-comment">//a:123</span><br>b = <span class="hljs-built_in">parseFloat</span>(b);<span class="hljs-comment">//b:12.34</span><br></code></pre></td></tr></table></figure></li></ol><p>c.将其他的数据类型转换为Boolean类型</p><ul><li>Boolean（）<br> 1.对于数字，0和NaN是false，其余的都是true。<br> 2.对于字符串，空串是false，其余的都是true。<br> 3.对于null和undefined，都是false。<br> 4.对于对象，都是true。</li></ul></li><li><p>隐式类型转换<br>a. 转换为String类型</p><ul><li>为任意的数据加一个空串   <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>a = a + ‘’;<span class="hljs-comment">//a:&quot;123&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>b. 转换为Number类型</p><ul><li>在数据前面放个+   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">var <span class="hljs-keyword">a</span> = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">a</span> = +<span class="hljs-keyword">a</span><span class="hljs-comment">;//a:123</span><br></code></pre></td></tr></table></figure></li></ul><p>c. 转换为Boolean类型</p><ul><li>为任意的数据取两次反   <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>a = !!a;<span class="hljs-comment">//a:true</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h2><ol><li><p>函数是什么<br>a. 函数是在其中有一组代码的逻辑构件，用来执行特定任务。实际上为了易于调试和维护，函数允许以更有组织的方式去编写代码。函数还允许代码重用。</p><p>b. 在JavaScript里，函数实际上是对象， 每个函数都是Function类型的实例， 而Function也有属性和方法。因为函数是对象， 所以函数名就是指向函数对象的指针</p></li><li><p>如何创建一个函数？<br>a. 使用Function构造函数创建函数</p><ul><li>在这种方法中，函数是在“函数”的构造函数的帮助下创建的。从技术上讲，这种方法比使用函数表达式语法和函数声明语句语法去声明函数的方法效率要低。   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sum2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;a1&quot;</span>, <span class="hljs-string">&quot;a2&quot;</span>, <span class="hljs-string">&quot;return a1 + a2&quot;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure></li></ul><p>b. 使用函数表达式</p><ul><li>通常这种方法与变量分配相同。简而言之，函数主体被视为一个表达式，并且该表达式被分配给一个变量。使用这种语法定义的函数可以是命名函数或匿名函数。   <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const <span class="hljs-built_in">sum</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a1, a2</span>) &#123;<br>    <span class="hljs-keyword">return</span> a1 + a2<br>&#125;<br>let a = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <br></code></pre></td></tr></table></figure>c. 使用函数声明</li></ul><ul><li>这种方法是JavaScript中常用的老派方法。在关键字“function”之后，你必须指定函数的名称。之后，如果函数接受多个参数或参数，也需要提及它们。虽然这部分是完全可选的。   <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params">参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;我是一个函数&quot;</span>)<br>&#125;<br>例 ： <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a1 , a2</span>) &#123;<br><span class="hljs-keyword">return</span> a1 + a2<br>&#125;<br>let a=<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure>d. 箭头函数</li><li>箭头函数相当于是函数表达式创建函数的更短的版本，但是相对于函数声明，不能使用 arguments，super，也不能用作构造函数，也没有prototype属性   <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let 函数名 = <span class="hljs-function">(<span class="hljs-params">参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2</span></span>) =&gt;</span> &#123;<br>&#125;<br>const frontEnd = <span class="hljs-function">(<span class="hljs-params">frontEnd</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(frontEnd + <span class="hljs-string">&#x27; yyds&#x27;</span>)<br>&#125;<br>frontEnd(<span class="hljs-string">&#x27;frontEnd&#x27;</span>)<br><span class="hljs-comment">//如果只有一个参数，甚至可以省略圆括号，使代码更短</span><br>const fe = <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a + <span class="hljs-number">1</span><br><span class="hljs-comment">//如果没有参数，圆括号将是空的（但圆括号应该保留）</span><br>let sayHi = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> alert(<span class="hljs-string">&quot;Hello!&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>函数参数<br>a. 函数重载</p><ul><li>函数通过参数的个数和类型不同来创建不同的函数签名，通过调用函数时传入的参数个数和参数类型来进行命名参数的验证。</li><li>但是,在js中后声明的同名函数会对前面声明的函数进行一个覆盖</li></ul><p>b. 默认函数值</p><ul><li>在有默认参数的函数中，调用arguments</li><li>函数的默认参数只有在函数被调用的时候才会求值，不会在函数定义时求值</li><li>计算默认值的函数只有在调用函数但未传相应参数时才会被调用   <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">names</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;frontEnd&#x27;</span></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name);<br>&#125;<br>names()<span class="hljs-comment">//frontend</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我被调用了&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">al</span>(<span class="hljs-params">l = log(</span>)) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(l);<br>&#125;<br>al(<span class="hljs-number">1</span>);<span class="hljs-comment">//1</span><br>al();<span class="hljs-comment">//我被调用了 2</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><p>c. 类数组arguments对象</p><ul><li>如果一个函数传递了三个参数，你可以以如下方式引用他们：   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arguments</span>[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">arguments</span>[<span class="hljs-number">1</span>]<br><span class="hljs-attribute">arguments</span>[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> = <span class="hljs-title">function</span> <span class="hljs-params">()</span></span> &#123;<br> console.log(arguments);<br> console.log(arguments[<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span><br><span class="hljs-comment">//Argument(5)[1,2,3,4,5]</span><br><span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure></li></ul><p>d. 将函数当作参数</p><ul><li>顾名思义，就是某个函数的参数是另一个函数<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">callSomeFunction</span>(someFunction, someArgnment) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">someFunction(someArgnment)</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(number) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">number</span> + <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(name) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">&#x27;Hello</span> &#x27; + name<br>&#125;<br><br>let result = callSomeFunction(add, <span class="hljs-number">10</span>)<br><br>console.log(result);<br><br>let result2 = callSomeFunction(sayHello, <span class="hljs-symbol">&#x27;xiaobb</span>&#x27;)<br><br>console.log(result2);<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>回调函数<ul><li>回调函数是一个函数，将会在另一个函数完成执行后立即执行。回调函数是一个作为参数传给另一个 JavaScript 函数的函数。这个回调函数会在传给的函数内部执行。</li></ul></li></ol><h3 id="面向对象（Object-oriented-programming）的思想"><a href="#面向对象（Object-oriented-programming）的思想" class="headerlink" title="面向对象（Object-oriented programming）的思想"></a>面向对象（Object-oriented programming）的思想</h3><ol><li>面向过程，就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步步实现，使用时在一个个调用函数就行了</li><li>面向对象，就是把事务分解成一个个对象，然后由对象之间分工合作完成。面向对象是以对象功能来划分问题</li></ol><p>面向对象的思路，是赋予冰箱开门关门的操作，给大象进门的操作，然后冰箱和大象两个对象合作完成任务；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">打开冰箱门<br>把大象塞进冰箱<br>关冰箱门<br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">     <li>面向过程的优点：性能比面向对象高，比较适合和硬件联系紧密的东西</li>     <li>面向对象的优点：易维护、易复用、易扩展、更适合多人合作的大项目</li>     </div>     <h3 id="对象"><a href="#对象" class="headerlink" title="对象:"></a>对象:</h3><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">    对象（object）是大括号定义的无序的数据集合，由键值对构成     </div><p>对象也是变量。但是对象包含很多值。</p><p>这段代码把多个值（20230001, 21, 张三）赋给名为 student的变量：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var student</span>= &#123;id:<span class="hljs-string">&quot;20230001&quot;</span>, age:21, name:<span class="hljs-string">&quot;张三&quot;</span>&#125;;<br></code></pre></td></tr></table></figure>值以名称:值对（即键值对）的方式来书写（名称和值由冒号分隔）。<br>JavaScript 对象是被命名值的容器。<h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4><p>（JavaScript 对象中的）名称:值对被称为属性。<br><br>我们也可以理解为对象的状态或对象的数据</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> student =&#123;<br>    <span class="hljs-built_in">status</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><p>对象也可以有方法。<br>方法是在对象上执行的动作。<br>方法以函数定义被存储在属性中。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> student =&#123;<br>    <span class="hljs-attr">sayhello</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>    &#125;，<br>    <span class="hljs-comment">// 简写</span><br>    sayhi()&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attribute">firstName</span>: <span class="hljs-string">&quot;Bill&quot;</span>,<br>  <span class="hljs-attribute">lastName</span> : <span class="hljs-string">&quot;Gates&quot;</span>,<br>  <span class="hljs-attribute">id       :</span><span class="hljs-string"> 678,</span><br><span class="hljs-string">  fullName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-keyword">this</span>.lastName;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">objectName.propertyName<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">objectName<span class="hljs-selector-attr">[<span class="hljs-string">&quot;propertyName&quot;</span>]</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">  obj1["key"] 是使用方括号语法访问对象属性，其中 "key" 是属性名的字符串表示。这种方式允许在方括号中使用变量或表达式来指定属性名，因此可以动态地访问对象的属性。例如：     </div><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> obj = &#123; <span class="hljs-built_in">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;;<br><span class="hljs-built_in">let</span> propertyName = <span class="hljs-string">&quot;key&quot;</span>;<br>console.<span class="hljs-built_in">log</span>(obj[propertyName]); // 输出 <span class="hljs-string">&quot;value&quot;</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;"> obj.key 是使用点语法访问对象属性，其中 key 是属性名。这种方式只能使用硬编码的属性名，不能使用变量或表达式。例如：     </div><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> obj = &#123; <span class="hljs-built_in">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;;<br>console.<span class="hljs-built_in">log</span>(obj.<span class="hljs-built_in">key</span>); // 输出 <span class="hljs-string">&quot;value&quot;</span><br></code></pre></td></tr></table></figure><h3 id="访问对象方法"><a href="#访问对象方法" class="headerlink" title="访问对象方法"></a>访问对象方法</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">objectName<span class="hljs-selector-class">.methodName</span>()<br></code></pre></td></tr></table></figure><h3 id="对象的声明方式"><a href="#对象的声明方式" class="headerlink" title="对象的声明方式"></a>对象的声明方式</h3><ol><li>声明字面量对象</li><li>通过Object类创建对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建空对象</span><br><span class="hljs-keyword">let</span> obj1 = &#123;&#125;<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-comment">// 添加属性</span><br>obj1.<span class="hljs-property">key1</span> = <span class="hljs-string">&quot;value1&quot;</span><br>obj2.<span class="hljs-property">key2</span> = <span class="hljs-number">12</span><br>obj1[<span class="hljs-string">&quot;key&quot;</span>] = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 添加方法</span><br>obj2.<span class="hljs-property">hi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="8-JS数组与字符串"><a href="#8-JS数组与字符串" class="headerlink" title="8.JS数组与字符串"></a>8.JS数组与字符串</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串是什么？"><a href="#字符串是什么？" class="headerlink" title="字符串是什么？"></a>字符串是什么？</h4><p><em>上过小学二年级的我们都知道，JS有7种基本数据类型和复杂数据类型，基本数据类型存储在栈中，和其他语言不同，JS中的字符串是基本数据类型中的一种</em></p><h4 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h4><p>字符串可以用双引号包裹，也可以用单引号包裹，JS中的字符串是动态的，不需要去为他设置长度。</p><h4 id="字符串常用属性方法"><a href="#字符串常用属性方法" class="headerlink" title="字符串常用属性方法"></a>字符串常用属性方法</h4><p>至于为什么字符串有方法，这点和JS中的包装类有关，大家课后可以自行去了解，目前大家只需要会用就可以了。</p><h5 id="获得字符串长度的length属性："><a href="#获得字符串长度的length属性：" class="headerlink" title="获得字符串长度的length属性："></a>获得字符串长度的length属性：</h5><p>使用字符串的length属性可以查看当前字符串中字符的数量，就算其中包括双字符也会按照单字符计算：<br>  <img src="/2024/03/06/js%E5%9F%BA%E7%A1%80/1.png" class=""><br>str长度按理来讲正常会为5，为6的原因是“😧”是进行增补过编码的字符，length属性按照16位码元作为一个字符去处理字符串，但是“😧”会占32位，所以他会被当成“😧”两个字符看待。</p><h5 id="拼接字符串的concat方法"><a href="#拼接字符串的concat方法" class="headerlink" title="拼接字符串的concat方法"></a>拼接字符串的concat方法</h5><p>concat方法用于连接（合并&#x2F;拼接）字符串，使用方法为:</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">let</span> str2 = <span class="hljs-built_in">str</span>.<span class="hljs-built_in">concat</span>(<span class="hljs-string">&quot; world&quot;</span>, <span class="hljs-string">&quot; qwq&quot;</span>);<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">str</span>); <br>console.<span class="hljs-built_in">log</span>(str2); <br></code></pre></td></tr></table></figure><p>字符串也可以使用加运算符来拼接：</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot; world&quot;</span>;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">str</span>); <span class="hljs-comment">// hello world</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">实际开发中更倾向于使用+运算符进行字符串拼接     </div>     <h5 id="字符串切片方法slice、substr、substring"><a href="#字符串切片方法slice、substr、substring" class="headerlink" title="字符串切片方法slice、substr、substring"></a>字符串切片方法slice、substr、substring</h5><p>切片方法，顾名思义，就是将字符串切成某一段的一片：<br>他接受两个参数，第一个参数是开始的位置（必传），第二个参数是结束的位置<br>当传入负数时，按照从末位开始算，-1表示倒数第一位</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-comment">//slice()</span><br><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;一二三四五六七八&quot;</span>;<br><span class="hljs-built_in">let</span> strSplice = <span class="hljs-built_in">str</span>.slice(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>);<br>console.<span class="hljs-built_in">log</span>(strSplice);<span class="hljs-comment">//一二三四五六</span><br></code></pre></td></tr></table></figure><p><code> substr(startIndex, length)</code>方法接受两个参数，第一个参数指定从哪个位置开始截取字符串，第二个参数指定要截取的字符个数。例如：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Str</span> = str.substr(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 从第 6 个位置开始截取 5 个字符</span><br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Str</span>); <span class="hljs-comment">// 输出 &quot;world&quot;</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">需要注意的是，如果第二个参数（即要截取的字符个数）缺省或为负数，则 substr() 方法将截取从第一个参数指定位置到字符串末尾的所有字符。     </div>     <p><code>substring(startIndex, endIndex)</code> 方法接受两个参数，第一个参数指定从哪个位置开始截取字符串，第二个参数指定要截取的最后一个字符所在位置的下标。例如：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Str</span> = str.substring(<span class="hljs-number">6</span>, <span class="hljs-number">11</span>); <span class="hljs-comment">// 从第 6 个位置开始截取到第 11 个位置（不包含第 11 个位置）</span><br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Str</span>); <span class="hljs-comment">// 输出 &quot;world&quot;</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">需要注意的是，如果 substring() 方法的第一个参数大于第二个参数，则方法会自动交换这两个参数的位置，然后再执行截取操作。     </div>     <h5 id="删除左右空格的trim方法"><a href="#删除左右空格的trim方法" class="headerlink" title="删除左右空格的trim方法"></a>删除左右空格的trim方法</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;   Hello World!   &quot;</span>;<br><span class="hljs-keyword">var</span> trimmedStr = str.<span class="hljs-built_in">trim</span>(); <span class="hljs-comment">// 去除字符串两端的空格</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(trimmedStr); <span class="hljs-comment">// 输出 &quot;Hello World!&quot;</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">需要注意的是，trim() 方法也不会改变原始字符串本身，而是返回一个新的字符串。因此，如果需要使用去除空格后的新字符串，请记得将其存储到一个变量中。     </div><h5 id="将字符串打碎成数组的split方法"><a href="#将字符串打碎成数组的split方法" class="headerlink" title="将字符串打碎成数组的split方法"></a>将字符串打碎成数组的split方法</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;一二三四五六七八&quot;</span><span class="hljs-comment">;</span><br>let engStr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world you qwq&quot;</span><span class="hljs-comment">;</span><br>console.log(str.split(<span class="hljs-string">&quot;&quot;</span>))<span class="hljs-comment">;</span><br>console.log(engStr.split(<span class="hljs-string">&quot; &quot;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h5 id="字符串的大小写转换方法toLowerCase-toUpperCase"><a href="#字符串的大小写转换方法toLowerCase-toUpperCase" class="headerlink" title="字符串的大小写转换方法toLowerCase toUpperCase"></a>字符串的大小写转换方法toLowerCase toUpperCase</h5><p><code>toLowerCase()</code>方法将字符串中所有的字母都转换为小写形式。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">var</span> lowerStr = str.toLowerCase(); <span class="hljs-comment">// 将字符串中的字母都转换为小写形式</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(lowerStr); <span class="hljs-comment">// 输出 &quot;hello world!&quot;</span><br></code></pre></td></tr></table></figure><p><code>toUpperCase()</code>方法将字符串中所有的字母都转换为大写形式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-keyword">var</span> upperStr = str.toUpperCase(); <span class="hljs-comment">// 将字符串中的字母都转换为大写形式</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(upperStr); <span class="hljs-comment">// 输出 &quot;HELLO WORLD!&quot;</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">toLowerCase()和toUpperCase() 方法并不会改变原始字符串本身，而是返回一个新的字符串。因此，如果需要使用新的字符串，请记得将其存储到一个变量中。     </div>     <h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组是什么"><a href="#数组是什么" class="headerlink" title="数组是什么"></a>数组是什么</h4><p>数组和上面所说的字符串不一样，他是一种复杂的数据类型，存储在堆中。<br>在JS的数组中，可以任意的存放各种类型的数据（这点和大多数其他语言不同），并且JS的数组是动态的，他会自动为你扩充大小。</p><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">在开发中，数组有时候也会存入一系列对象，这在JS中是被允许的，而且也会有遍历的方法，详见下文     </div>     <h4 id="如何访问数组？"><a href="#如何访问数组？" class="headerlink" title="如何访问数组？"></a>如何访问数组？</h4><p>与C语言类似，JS的数组也是通过[ ]进行访问的，索引值0依旧代表第一个元素，以此类推。</p><h4 id="检查数组长度的length属性"><a href="#检查数组长度的length属性" class="headerlink" title="检查数组长度的length属性"></a>检查数组长度的length属性</h4><p>和字符串的属性类似，数组会有一个length属性供我们查看数组中有多少个元素。</p><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">虽然到这里大家很容易就可以想到可以使用for循环和length属性遍历数组中的元素，但请先不要这样做，下面会有更好的方式去遍历数组。     </div>    <h4 id="转换数组为字符串的join方法"><a href="#转换数组为字符串的join方法" class="headerlink" title="转换数组为字符串的join方法"></a>转换数组为字符串的join方法</h4><p>其实在JS中，数组也是一种特殊的对象，所有对象都会拥有toString方法用于返回一个和该对象有关的字符串，数组也不例外，他可以返回一个用逗号相连的字符串。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;qwq&quot;</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.toString());<span class="hljs-comment">//a,b,1,2,qwq</span><br></code></pre></td></tr></table></figure><p>使用join方法可以直接返回一个以传入参数为分隔连接起来的字符串</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;qwq&quot;</span>];<br>console.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">join</span>(<span class="hljs-string">&quot;&quot;</span>));<br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">不推荐使用toString方法，因为toString方法在任何对象（包括各种数组以外的对象）join方法相对更好用。     </div><h4 id="数组的推入与删除push-pop-shift-unshift"><a href="#数组的推入与删除push-pop-shift-unshift" class="headerlink" title="数组的推入与删除push pop shift unshift"></a>数组的推入与删除push pop shift unshift</h4><p>使用push pop shift unshift方法可以操作数组最前面一项和最后面一项<br>push：向数组的最后推入一项<br>pop：移除数组的最后一项<br>shift：移除数组的第一项<br>unshift：向数组最前方推入一项</p><h5 id="push和pop方法可以构建类似栈的处理方式"><a href="#push和pop方法可以构建类似栈的处理方式" class="headerlink" title="push和pop方法可以构建类似栈的处理方式"></a>push和pop方法可以构建类似栈的处理方式</h5><p>使用push向末尾推入新的一项，用pop删除最后一项，这样的操作方式和栈的工作原理一致(类似于摞书，后进先出)</p><h5 id="shift和push方法可以构建类似队列的处理方式"><a href="#shift和push方法可以构建类似队列的处理方式" class="headerlink" title="shift和push方法可以构建类似队列的处理方式"></a>shift和push方法可以构建类似队列的处理方式</h5><p>使用shift和push方法可以构建类似队列的处理方式，使用push推入最后一项，使用shift删除最前面的一项。（类似于排队，先进先出）</p><h4 id="数组的迭代方法map，forEach"><a href="#数组的迭代方法map，forEach" class="headerlink" title="数组的迭代方法map，forEach"></a>数组的迭代方法map，forEach</h4><h5 id="forEach方法-不带返回值"><a href="#forEach方法-不带返回值" class="headerlink" title="forEach方法(不带返回值):"></a>forEach方法(不带返回值):</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br>arr.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(item);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="map方法-有返回值，返回值为一个新数组"><a href="#map方法-有返回值，返回值为一个新数组" class="headerlink" title="map方法(有返回值，返回值为一个新数组):"></a>map方法(有返回值，返回值为一个新数组):</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br>let arrNew = arr.<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arrNew);<br></code></pre></td></tr></table></figure><p>并且，map方法可以方便进行链式调用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br>let arrNew = arr<br>  .<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">item，index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;<br>  &#125;)<br>  .<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span> ? item : <span class="hljs-literal">undefined</span>;<br>  &#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arrNew);<br></code></pre></td></tr></table></figure><h4 id="数组的过滤方法filter"><a href="#数组的过滤方法filter" class="headerlink" title="数组的过滤方法filter"></a>数组的过滤方法filter</h4><p><code>filter方法</code>用于对数组进行过滤。它会创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span> &gt; <span class="hljs-number">3</span><br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);<span class="hljs-comment">//5,6</span><br></code></pre></td></tr></table></figure><h4 id="数组中查找某个元素的位置indexOf"><a href="#数组中查找某个元素的位置indexOf" class="headerlink" title="数组中查找某个元素的位置indexOf"></a>数组中查找某个元素的位置indexOf</h4><p><code>array.indexOf(item,start)</code>方法可返回数组中某个指定的元素位置。该方法将从头到尾地检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置。如果在数组中没找到指定元素则返回 -1。</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs flix"><span class="hljs-keyword">let</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">index</span> = fruits.indexOf(<span class="hljs-string">&quot;Apple&quot;</span>);<br>console.log(<span class="hljs-keyword">index</span>);<br></code></pre></td></tr></table></figure><h4 id="翻转数组reverse"><a href="#翻转数组reverse" class="headerlink" title="翻转数组reverse()"></a>翻转数组reverse()</h4><p><code>reverse()</code> 方法会原地反转数组元素的顺序。即将数组中的第一个元素变为最后一个元素，第二个元素变为倒数第二个元素，依此类推。该方法不会创建一个新的数组，而是直接修改原数组。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-built_in">reverse</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出：[5, 4, 3, 2, 1]</span><br></code></pre></td></tr></table></figure><h4 id="排序方法sort"><a href="#排序方法sort" class="headerlink" title="排序方法sort()"></a>排序方法sort()</h4><p><code>sort()</code>方法用于对数组进行排序，默认情况下按照 Unicode 编码进行排序。该方法会原地修改数组，将其按照指定的排序顺序重新排列。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-built_in">sort</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出：[1, 2, 3, 4, 5]ß</span><br></code></pre></td></tr></table></figure><p>在上述代码中，我们调用 sort() 方法对数组 arr 进行排序，结果是按照升序排列的数组。<br>如果需要自定义排序规则，可以通过传入一个比较函数作为参数来实现。比较函数应返回一个负数、零或正数，分别表示第一个参数小于、等于或大于第二个参数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>];<br>arr.<span class="hljs-built_in">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// 输出：[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h4 id="截取数组splice"><a href="#截取数组splice" class="headerlink" title="截取数组splice()"></a>截取数组splice()</h4><p><code>splice()</code>是一个用于修改数组的方法。它可以删除现有元素、添加新元素或替换现有元素。splice() 方法可以接受多个参数，主要包括：<br>起始索引(必需)：指定修改的起始位置。<br>要删除的元素个数（可选）：指定要删除的元素数量。<br>要添加到数组的元素（可选）：可以添加一个或多个元素到数组中。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">let fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;cherry&#x27;</span>,<span class="hljs-string">&#x27;date&#x27;</span>];<br><br><span class="hljs-regexp">//</span> 从索引为 <span class="hljs-number">2</span> 的位置开始删除 <span class="hljs-number">1</span> 个元素<br>fruits.splice(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>); <span class="hljs-regexp">//</span> fruits变为[<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;date&#x27;</span>]<br><br><span class="hljs-regexp">//</span> 从索引为 <span class="hljs-number">1</span> 的位置开始删除 <span class="hljs-number">2</span> 个元素,并添加<span class="hljs-string">&#x27;orange&#x27;</span>和<span class="hljs-string">&#x27;peach&#x27;</span><br>fruits.splice(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>); <span class="hljs-regexp">//</span> fruits变为[<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>,<span class="hljs-string">&#x27;peach&#x27;</span>]<br><br><span class="hljs-regexp">//</span> 从索引为 <span class="hljs-number">2</span> 的位置开始不删除元素，但添加 <span class="hljs-string">&#x27;kiwi&#x27;</span> 和 <span class="hljs-string">&#x27;lemon&#x27;</span><br>fruits.splice(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;kiwi&#x27;</span>, <span class="hljs-string">&#x27;lemon&#x27;</span>); <span class="hljs-regexp">//</span> fruits变为[<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>,<span class="hljs-string">&#x27;kiwi&#x27;</span>,<span class="hljs-string">&#x27;lemon&#x27;</span>,<span class="hljs-string">&#x27;peach&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h3><h4 id="1-解构赋值"><a href="#1-解构赋值" class="headerlink" title="1.解构赋值"></a>1.解构赋值</h4><p><strong>定义</strong>：允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-keyword">var</span> tmp = foo(),<br>a = tmp[<span class="hljs-number">0</span>], b = tmp[<span class="hljs-number">1</span>], c = tmp[<span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a, b, c);<br></code></pre></td></tr></table></figure><p>上例可以看到，我们进行一个手动赋值，把foo()返回数组中的值赋给独立变量a,b,c ，为了实现这一点我们需要一个临时变量<code>tmp</code>。</p><h5 id="1-数组解构"><a href="#1-数组解构" class="headerlink" title="1)数组解构"></a>1)数组解构</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let [a, b, c，d] = foo();<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)<span class="hljs-comment">//1</span><br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)<span class="hljs-comment">//2</span><br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c)<span class="hljs-comment">//3</span><br><span class="hljs-comment">//如果解构不成功，变量的值为undefined</span><br></code></pre></td></tr></table></figure><h5 id="2-对象解构"><a href="#2-对象解构" class="headerlink" title="2)对象解构"></a>2)对象解构</h5><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">let person = &#123; <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, age: <span class="hljs-number">20</span> &#125;; <br> let &#123; <span class="hljs-keyword">name</span>, age &#125; = person;<br> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">name</span>); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br> console.<span class="hljs-built_in">log</span>(age); <span class="hljs-comment">// 20</span><br><span class="hljs-comment">//注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；</span><br><span class="hljs-comment">//而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</span><br></code></pre></td></tr></table></figure><p>我们还可以指定其他的属性名</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge&#125; = person; <span class="hljs-comment">// myName myAge 属于别名</span><br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myName); <span class="hljs-comment">// &#x27;zhangsan&#x27; </span><br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myAge); <span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><p>这实际上说明，对象的解构赋值是下面形式的简写</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> &#123;<br>           <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>,<br>           <span class="hljs-attr">y</span>: <span class="hljs-number">5</span>,<br>           <span class="hljs-attr">z</span>: <span class="hljs-number">6</span><br>       &#125;;<br>   &#125;<br>   <span class="hljs-keyword">var</span> &#123; <span class="hljs-attr">x</span>: x, <span class="hljs-attr">y</span>: y, <span class="hljs-attr">z</span>: z &#125; = bar();<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x, y, z);<br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">如果属性名和要赋值的变量名相同，这种语法可以更简短一些     </div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">return</span> &#123;<br>           <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>,<br>           <span class="hljs-attr">y</span>: <span class="hljs-number">5</span>,<br>           <span class="hljs-attr">z</span>: <span class="hljs-number">6</span><br>       &#125;;<br>   &#125;<br>   <span class="hljs-keyword">var</span> &#123; x, y, z &#125; = bar();<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x, y, z);<br></code></pre></td></tr></table></figure><h5 id="3-小结"><a href="#3-小结" class="headerlink" title="3)小结"></a>3)小结</h5><ul><li>解构赋值就是把数据解构分解，然后给变量进行赋值</li><li>如果解构不成功，变量跟数值个数不匹配的时候，变量的值为<code>undefined</code></li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象的属性跟方法</li><li>以上只是一些基本的用法，我们还可以在解构的同时指定参数的默认值，对数组对象进行多次解构等</li></ul><h4 id="2-对象字面量"><a href="#2-对象字面量" class="headerlink" title="2.对象字面量"></a>2.对象字面量</h4><h5 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h5><p>ES6允许对象的属性直接写变量，这时候属性名是变量名，属性值是变量值。在大括号里面，就可以直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">const age</span> = 12;<br><span class="hljs-attribute">const name</span> = <span class="hljs-string">&quot;Amy&quot;</span>;<br><span class="hljs-attribute">const person</span> = &#123;age, name&#125;;<br></code></pre></td></tr></table></figure><p> 方法名也可以简写<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br>  &#125;<br>&#125;<br>person.<span class="hljs-title function_">sayHi</span>();  <span class="hljs-comment">//&quot;Hi&quot;</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h5 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h5><p>ES6允许用表达式作为属性名，但是一定要将表达式放在方括号内。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> obj = &#123;<br> [<span class="hljs-string">&quot;he&quot;</span>+<span class="hljs-string">&quot;llo&quot;</span>]()&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hi&quot;</span>;<br>  &#125;<br>&#125;<br>obj.hello();  <span class="hljs-comment">//&quot;Hi&quot;</span><br></code></pre></td></tr></table></figure><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">注意：属性的简洁表示法和属性名表达式不能同时使用，否则会报错。     </div><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = &#x27;hello&#x27;<br>   <span class="hljs-built_in">let</span> obj = &#123; [<span class="hljs-built_in">str</span>] &#125;<span class="hljs-comment">//报错</span><br>   console.<span class="hljs-built_in">log</span>(obj);<br></code></pre></td></tr></table></figure><h4 id="3-对象的拓展运算符"><a href="#3-对象的拓展运算符" class="headerlink" title="3.对象的拓展运算符"></a>3.对象的拓展运算符</h4><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。<br>基本用法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">let</span> person = &#123;name: <span class="hljs-string">&quot;Amy&quot;</span>, age: <span class="hljs-number">15</span> &#125;;<br><span class="hljs-keyword">let</span> someone = &#123; <span class="hljs-params">...</span>person &#125;;<span class="hljs-comment">//此时someone与person所含键值对相同</span><br></code></pre></td></tr></table></figure><p>可用于合并两个对象</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> age = &#123;age: <span class="hljs-number">15</span>&#125;;<br><span class="hljs-keyword">let</span><span class="hljs-built_in"> name</span> = <span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;Amy&quot;</span>&#125;;<br><span class="hljs-keyword">let</span> person = &#123;...age, ..<span class="hljs-built_in">.name</span>&#125;;<br></code></pre></td></tr></table></figure><h4 id="set对象"><a href="#set对象" class="headerlink" title="set对象"></a>set对象</h4><p>Set 对象是 JavaScript 中的一种数据结构，用于存储唯一的值。它类似于数组，但是与数组不同的是，Set 中的元素是唯一的，不会出现重复值。<br>下面是一些 Set 对象的特点：</p><ol><li>唯一性：Set 中的元素是唯一的，重复的元素只会保留一个副本。</li><li>无序性：Set 中的元素没有固定的顺序，不像数组有索引来访问元素。</li><li>可迭代性：可以通过迭代器遍历 Set 中的元素。</li><li>高效性：Set 提供了高效的添加、删除和查找元素的操作。</li></ol><p><strong>可以使用 add() 方法向 Set 对象中添加元素，使用 delete() 方法删除元素，使用 has() 方法检查元素是否存在，使用 clear() 方法清空 Set 对象中的所有元素。</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const mySet = <span class="hljs-keyword">new</span> Set();<br>mySet.add(<span class="hljs-string">&quot;apple&quot;</span>); <span class="hljs-comment">// </span><br>mySet.add(<span class="hljs-string">&quot;banana&quot;</span>);<br>mySet.add(<span class="hljs-string">&quot;orange&quot;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(mySet.size); <span class="hljs-comment">// 输出: 3</span><br><br>mySet.delete(<span class="hljs-string">&quot;banana&quot;</span>);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(mySet.has(<span class="hljs-string">&quot;apple&quot;</span>)); <span class="hljs-comment">// 输出: true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(mySet.has(<span class="hljs-string">&quot;banana&quot;</span>)); <span class="hljs-comment">// 输出: false</span><br><br>mySet.forEach(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value);<br>&#125;);<br><span class="hljs-comment">// 输出:</span><br><span class="hljs-comment">// apple</span><br><span class="hljs-comment">// orange</span><br></code></pre></td></tr></table></figure><h4 id="map对象"><a href="#map对象" class="headerlink" title="map对象"></a>map对象</h4><p>Map是一种集合类型，它提供了一种将键值对存储为映射关系的方式。相比于普通的对象，Map 对象具有以下优势和用途：<br>任意类型的键：在Map对象中，键可以是任意数据类型，包括基本类型、对象、函数等。而在普通对象中，键只能是字符串或符号。</p><ol><li><p><strong>顺序迭代</strong>：Map对象会按照插入的顺序保留键值对，因此可以通过迭代器按照插入顺序遍历 Map 中的元素。</p></li><li><p><strong>快速查找</strong>：使用 Map对象可以快速查找特定键的值，而不需要进行线性搜索，相比较普通对象的属性查找效率更高。</p></li><li><p><strong>键的唯一性</strong>：Map对象中的键是唯一的，不会出现重复键。如果使用相同的键进行多次设置，则后续的设置会覆盖前面的设置。</p></li><li><p><strong>可迭代性</strong>：Map对象是可迭代的，可以使用 for…of 或 forEach() 方法遍历 Map 中的键值对。</p></li><li><p><strong>灵活性</strong>：Map对象提供了丰富的方法和属性，例如 set()、get()、has()、delete() 等，以及 size 属性用于获取 Map 中键值对的数量。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 创建一个 Map 对象</span><br>const myMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><br><span class="hljs-comment">// 设置键值对</span><br>myMap.set(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>);<br>myMap.set(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-number">25</span>);<br>myMap.set(<span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>);<br><br><span class="hljs-comment">// 获取值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myMap.get(<span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// 输出: Alice</span><br><br><span class="hljs-comment">// 检查键是否存在</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myMap.has(<span class="hljs-string">&#x27;age&#x27;</span>)); <span class="hljs-comment">// 输出: true</span><br><br><span class="hljs-comment">// 获取 Map 中的键的数量</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myMap.size); <span class="hljs-comment">// 输出: 3</span><br><br><span class="hljs-comment">// 遍历 Map</span><br>myMap.forEach(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;);<br><span class="hljs-comment">// 输出:</span><br><span class="hljs-comment">// name: Alice</span><br><span class="hljs-comment">// age: 25</span><br><span class="hljs-comment">// city: Beijing</span><br><br><span class="hljs-comment">// 使用迭代器遍历 Map</span><br><span class="hljs-keyword">for</span> (const [key, value] of myMap) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;<br><span class="hljs-comment">// 输出:</span><br><span class="hljs-comment">// name: Alice</span><br><span class="hljs-comment">// age: 25</span><br><span class="hljs-comment">// city: Beijing</span><br><br><span class="hljs-comment">// 删除键值对</span><br>myMap.delete(<span class="hljs-string">&#x27;age&#x27;</span>);<br><br><span class="hljs-comment">// 清空 Map</span><br>myMap.clear();<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2024/02/29/CSS/"/>
    <url>/2024/02/29/CSS/</url>
    
    <content type="html"><![CDATA[<h2 id="section9">一.CSS选择器的概念</h2>    <br>    <p>CSS选择器，是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式。</p>    <br>    <div style="border: 3px solid gold;">        <ol>            <li>通配选择器，由一个星号（*）代指它选中了文档中的所有内容。</li>            <li>类型选择器，也叫标签名选择器或者是元素选择器，它在文档中选择了一个 HTML 标签/元素</li>            <li>类选择器，以一个句点（.）开头，会选择文档中应用了这个类的所有物件。</li>            <li>id选择器，开头为#而非句点，不过基本上和类选择器是同种用法。一个 ID 只会一般用到一次，虽然用多次也能正常显示，但是用javascript通过id来控制元素时就会出现错误。</li>        </ol>    </div>   <img src="/2024/02/29/CSS/1_%E5%89%AF%E6%9C%AC.png" class="">    <p>层叠是 CSS 的一个基本特征，意为多个选择符之间具有特定的优先级，它是一个定义了如何合并来自多个源的属性值的算法。</p>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br>      <br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:bule;<br>&#125;<br></code></pre></td></tr></table></figure>    <div>在上面的代码块中，我们为p选择器定义了两个规则，但是段落最后是蓝色的。这是因为将其设置为蓝色的声明将出现在样式表的后面，而稍后的样式将覆盖以前的样式。</div>    <br>    <div>这是在同样优先级的情况下，如果在优先级不同时，</div>    <br>    <div>比如，在我们同时使用了类选择器和元素选择器的前一个例子中，类将获胜，使得段落变红——即使它出现在样式表的前面。</div>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.special</span>&#123;<br><span class="hljs-attribute">color</span>:aqua;<br>&#125;<br>       <br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:black;<br>&#125;<br></code></pre></td></tr></table></figure>    <div>所以，在同优先级的情况下，后定义的生效，不同级则优先级高的生效。</div>    <br>    <div>各优先级关系，一般来说，选择器的优先级，范围越小，优先级越高</div>    <br>    <div>id选择器 > 类选择器 > 元素选择器 > 通配符选择器</div>      <img src="/2024/02/29/CSS/2_%E5%89%AF%E6%9C%AC.png" class="">    <h2 id="section10">二.CSS基本样式</h2>    <br>    <h3>常用样式</h3>    <h4>1.font-size:字体大小px</h4>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-weight</span>:normal;//字体粗细<br><span class="hljs-attribute">font-style</span>:italic;//字体倾斜<br></code></pre></td></tr></table></figure>    <br>    <h4>2.text-align:center;//文本对齐</h4>       <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: none; //无装饰<br> <span class="hljs-attribute">text-decoration</span>: overline; //上划线<br> <span class="hljs-attribute">text-decoration</span>: line-through; //中划线<br> <span class="hljs-attribute">text-decoration</span>: underline; //下划线<br> <span class="hljs-attribute">text-transform</span>: uppercase; //文本转换，全部换为大写字母<br> <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">50px</span>; //首行缩进<br><span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>; //字母间距<br> <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">10px</span>; //单词间距<br> <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0.8</span>; //行间距<br> <span class="hljs-attribute">white-space</span>: nowrap; //禁用<span class="hljs-selector-tag">html</span>框中文字编辑时的换行符（不必懂）<br> <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> red;//分别是文本的水平、垂直阴影以及阴影的模糊效果、阴影颜色<br></code></pre></td></tr></table></figure>    <h4>3.color:字体颜色</h4>        <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">使用 <span class="hljs-attribute">color</span> 属性：可以直接为元素指定 <span class="hljs-attribute">color</span> 属性来设置字体颜色<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br>使用 RGB 值：可以使用 RGB 值来指定颜色<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <br>&#125;<br><br>使用十六进制值：也可以使用十六进制值来指定颜色<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>; <br>&#125;<br></code></pre></td></tr></table></figure>    <br>    <h4>4.background:背景样式</h4>           <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: blue; //颜色名称方式<br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); //RGB方式<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0000</span>; //十六进制方式<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;bg.png&quot;</span>) ; //设置背景图片<br><span class="hljs-attribute">background-size</span>: contain/cover; // 图片相对于盒子的尺寸<br><span class="hljs-attribute">background-repeat</span>: repeat-x; //沿x方向阵列<br><span class="hljs-attribute">background-position</span>: right top; //设置背景图片初始位置<br><span class="hljs-attribute">background-attachment</span>: fixed; //背景图片是否随网页滑动<br><span class="hljs-attribute">background</span>: <span class="hljs-number">#ffffff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;tree.png&quot;</span>) no-repeat right top;//简写形式<br></code></pre></td></tr></table></figure>    <br>    <h4>5.height,width,margin,padding、border</h4>      <img src="/2024/02/29/CSS/3_%E5%89%AF%E6%9C%AC.png" class="">            <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border-style</span>: solid; // 边框样式<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#ccc</span>; // 边框颜色<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">15px</span>; // 边框宽度<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>; //允许你设置元素的外边框圆角,该属性是将这四个属性<span class="hljs-attribute">border-top-left-radius</span>,<span class="hljs-attribute">border-top-right-radius</span>,<span class="hljs-attribute">border-bottom-right-radius</span>,<span class="hljs-attribute">border-bottom-left-radius</span>简写为一个属性。<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">15px</span> solid green; //边框粗细 实线 颜色，dotted是点线，double是双线，dashed是虚线<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br>   //<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>; 设置内容的高度<br>   //<span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>; 设置内容的宽度<br></code></pre></td></tr></table></figure>    <h4>6.outline-style:轮廓样式</h4>            <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">outline-color</span>: red; //轮廓颜色<br><span class="hljs-attribute">outline-style</span>: dotted; //轮廓样式<br><span class="hljs-attribute">outline-width</span>: thin; 轮廓宽度<br><span class="hljs-attribute">outline</span>: <span class="hljs-number">5px</span> solid yellow; 简写轮廓属性<br>&lt;<span class="hljs-attribute">outline-offset</span>: <span class="hljs-number">25px</span>;//轮廓偏移<br></code></pre></td></tr></table></figure>    <h4>7.轮廓（outline）与边框（border）的区别：</h4> <div style="border: 3px solid rgb(253, 232, 179);">        <ol type="a">            <li>border 可应用于几乎所有有形的 html 元素，而 outline 是针对链接、表单控件等元素设计。</li>            <li>outline 的效果将随元素的 focus 而自动出现(除非手动设置outline-style)，相应的由 blur（blur事件，即指元素失去焦点） 而自动消失。这些都是浏览器的默认行为，无需JavaScript 配合 CSS 来控制。</li>            <li>outline 是不占空间的，不会像 border 那样影响元素的尺寸或者位置，既不会增加额外的 width 或者 height</li>            <li>对于input之类的表单控件，当你手动设置outline-style，它将不会采用默认的触发方式，而是直接显示，在没有手动设置outline-style的情况下，outline-width不生效</li>        </ol>    </div>     <h4>7.cursor的常用方法</h4>     <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">auto：浏览器自动决定合适的光标。<br>default：默认光标，通常是一个箭头。<br>pointer：手形光标，表示链接。<br>help：帮助光标，通常是一个问号。<br>wait：等待光标，表示正在加载或处理中。<br>text：文本光标，表示可编辑文本。<br>move：移动光标，表示可移动对象。<br>not-allowed：禁止操作光标，表示不允许点击或操作。<br></code></pre></td></tr></table></figure>    <h2 id="section11">三.CSS伪元素和伪类</h2>    <h3>什么是伪类？</h3>    <div>伪类是选择器的一种，它用于选择处于特定状态的元素。</div>    <h4>语法</h4>    <div>伪类就是开头为冒号的关键字：</div>    <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">selector:pseudo-<span class="hljs-keyword">class</span>-<span class="hljs-keyword">name</span><span class="hljs-comment">&#123;&#125;</span><br></code></pre></td></tr></table></figure>    <h4>常见伪类</h4>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-comment">/* 在用户将指针挪到元素上的时候才会激活 */</span><br><span class="hljs-selector-pseudo">:focus</span> <span class="hljs-comment">/* 获得焦点的元素激活 */</span><br><span class="hljs-selector-pseudo">:active</span> <span class="hljs-comment">/* 当元素被激活（例如，当按钮被点击并保持按下状态）时应用样式。*/</span><br></code></pre></td></tr></table></figure>    <h3>什么是伪元素？</h3>    <div>伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。</div>    <h4>语法</h4>    <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">selector:</span>:<span class="hljs-title class_">pseudo-element</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">          property:</span> <span class="hljs-attr">value</span><span class="hljs-punctuation">;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>    <h4>常见伪元素</h4>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">::after</span> <span class="hljs-comment">/* 用来创建一个伪元素，作为已选中元素的最后一个子元素,通常会配合content属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素 */</span><br><span class="hljs-selector-pseudo">::before</span> <span class="hljs-comment">/* 用来创建一个伪元素，作为已选中元素的第一个子元素，其余同上 */</span><br><span class="hljs-attribute">content</span> <span class="hljs-comment">/* 用于在元素的 ::before 和 ::after 伪元素中插入内容 */</span><br></code></pre></td></tr></table></figure>    <h3>html与css的结合方式</h3>    <ol>        <li>行内式：html中的标签属性 style ：适用于单纯只有一个标签需要设置时的特殊样式。如果多个标签需要应用同一个样式，建议采用内嵌式。</li>          <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue;background-color: yellow;border: 1px solid black;&quot;</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>        <li>内嵌式：建议在head中使用，使用标签 style 适用于当前页面多个标签使用同一个样式。</li>        <li>外链式：link:适用于多个页面使用同一个样式时。</li>    </ol>    <div style="text-align:left;"><strong>注意：link中href属性必须有，表示链接的css文件。</strong></div>   ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器运行原理</title>
    <link href="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <url>/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[ <h2>浏览器运行原理</h2>    <br>    <h3 id="section1">1.浏览器简化结构图</h3> <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="">    <br>    <h3 id="section2">2.浏览器内核</h3>    <br>    <ul type="square">        <li>常见浏览器:IE、Edge、Firefox、Chrome、Safari、Opera</li>        <li>浏览器内核分成两部分：渲染引擎和JS引擎</li>        <li type="circle">渲染引擎:对HTML文档进行解析并将其显示在页面上的工具</li>        <li type="circle">由于js引擎越来越独立，内核就倾向于只指渲染引擎</li>    </ul>  <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png" class="">    <h3 id="section3">3.浏览器是如何工作的</h3>    <br>    <p><strong>1.进程和线程</strong></p>    <p>进程是操作系统进行资源分配和调度的基本单元,可以申请和拥有计算机资源,进程是程序的基本执行实体。</p>    <p>线程是操作系统能够进行运算调度的最小单位,一个进程中可以并发多个线程,每条线程并行执行不同的任务。</p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B.png" class="">    <ul type="square">        <li>线程之间可以互相通信，交换数据</li>        <li>进程之间相对独立，并且内存也相对独立互不干扰</li>        <li>若进程之间需要相互通信，需要借用IPC（通信管道）</li>    </ul>    <br>    <p><strong>2.早期浏览器结构</strong></p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%97%A9%E6%9C%9F%E6%B5%8F%E8%A7%88%E5%99%A8.png" class="">    <ol>        <li style="color: chocolate;">不稳定 因为：其中一个线程的卡死可能会导致整个进程出问题，比如你打开一个标签页，其中一个标签页卡死可能会导致整个浏览器无法运行。</li>        <li style="color: chocolate;">不安全 因为：浏览器线程之间是可以共享数据的，那JS线程岂不是可以随意访问浏览器进程内的所有数据。</li>        <li style="color: chocolate;">不流畅 因为：一个进程需要负责太多事情，会导致运行效率问题。</li>    </ol>    <br>    <p><strong>3.现代浏览器结构</strong></p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%93%E6%9E%84.png" class="">    <ol type="i" style="background-color: blanchedalmond;">        <li>浏览器进程负责控制，Chrome浏览器除标签页外的用户界面，包括包括地址栏、书签、后退和前进按钮，以及负责与浏览器的其他进程协调工作。</li>        <li>网络进程负责发起接受网络请求</li>        <li>GPU进程负责整个浏览器界面的渲染</li>        <li>插件进程负责控制网站使用的所有插件，例如flash</li>        <li>渲染器进程用来控制显示tab标签内的所有内容</li>    </ol>    <br>    <h3 id="section4"><strong>4.在浏览器中搜索内容时，浏览器内部发生了什么</strong></h3>    <br>    <span>相关词释义：</span>    <ul style="font-family:cursive">        <li style="font-size: large;">DOM就是文档对象模型，是浏览器对页面在其内部的表示形式</li>        <li style="font-size: large;">layout树上的每个节点都记录了（X,Y）坐标和边框尺寸。</li>        <li style="font-size: large;">绘制记录表记录了会绘制的顺序（类似于图层）</li>        <li style="font-size: large;">Layer树是分层树，记录层级</li>        <li style="font-size: large;">draw quads是图块信息</li>    </ul>    <br>    <a href="https://gagjcxhxrb.feishu.cn/docx/VlWidsVZeoX8ySxACJRcN3P8njz?openbrd=1&doc_app_id=501&blockId=KINodiA1to1oLFxJUwbcONpynuf&blockType=whiteboard&blockToken=Rrotw6LkMhpnobbpATfcGnPYnWg#KINodiA1to1oLFxJUwbcONpynuf"        target="_blank">详细的浏览器内部进程</a>    <p style="font-size: larger;" style="font-weight: 600;">浏览器内部主要的进程</p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%B8%B2%E6%9F%93%E5%99%A8.png" class="">    <p><strong>内部进程具体的过程</strong></p>    <div style="border: #e5b832 solid 2px;">        <ol>        <li>浏览器进程中的网络线程请求获取到html数据后，通过IPC将数据传给渲染器进程的主线程</li>        <li>数据在主线程中经过解析来构造DOM树</li>        <li>css代码进行样式计算，使得DOM树得各个节点拥有各自的样式</li>        <li>根据DOM树和省城好的样式生成器layout树</li>        <li>通过遍历Layout树生成绘制顺序表</li>        <li>接着遍历Layout树生成了Layer树</li>        <li>主线程将layer树和绘制顺序表的信息一起传给合成器线程</li>        <li>合成器线程分图层，并将图层分为更小的图块，将其传给栅格化线程</li>        <li>栅格化线程进行栅格化</li>        <li>栅格化完成后，合成器线程得到栅格化线程传过去的图块信息（drawquads）</li>        <li>根据图块信息，合成器线程合成一个合成器帧，然后将其通过IPC传回浏览器进程</li>        <li>浏览器进程再将合成器帧传到GPU进行渲染</li>    </ol>    </div>        <br>    <p>布局、绘制和JS执行都是在主线程运行的，当在一帧的时间内布局和绘制结束后，如果还有剩余时间，JS就会拿到主线程的使用权，进而解析和执行JS代码。</p>    <p>如果在一帧的时间内未能解析并执行完js代码，则会造成一帧的卡顿。并且在解析和执行完js代码后，使用权才会由js代码变为主线程</p>    <br>    <h3 id="section5"><strong>5.回流（重排）和重绘</strong></h3>    <p>重绘 （Redraw）：某些元素的外观被改变所触发的浏览器行为（重新计算节点在屏幕中的绝对位置并渲染的过程）。</p>    <p>例如：修改元素的填充颜色，会触发重绘。</p>    <p>回流（重排）（Reflow）：重新生成布局，重新排列元素（重新计算各节点和css具体的大小和位置：渲染树需要重新计算所有受影响的节点）。</p>    <p>例如：改元素的宽高，会触发重排。</p>    <h4>通过两者概念区别明显得知，重排要比重绘的成本大得多，我们应该尽量减少重排操作，减少页面性能消耗</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Html基础知识</title>
    <link href="/2024/02/28/Html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/02/28/Html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-网页的构成"><a href="#1-网页的构成" class="headerlink" title="1.网页的构成"></a>1.网页的构成</h2><p>网页一般由三部分组成，分别是HTML（超文本标记语言）、CSS<strong>（层叠样式表）</strong>和JavaScript<strong>（简称“JS”动态脚本语言）</strong>，它们三者在网页中分别承担着不同的任务。</p><ul><li><strong>HTML 负责定义网页的内容</strong></li><li><strong>CSS 负责描述网页的布局</strong></li><li><strong>JavaScript负责网页的行为</strong></li></ul><h2 id="2-常用html元素"><a href="#2-常用html元素" class="headerlink" title="2.常用html元素"></a>2.常用html元素</h2><h4 id="标签标题"><a href="#标签标题" class="headerlink" title="标签标题"></a><strong>标签标题</strong></h4><p>作为标题使用，并且依据重要性递减（h1,h2….h6）</p><h4 id="换行标签和水平分割线标签"><a href="#换行标签和水平分割线标签" class="headerlink" title="换行标签和水平分割线标签"></a><strong>换行标签和水平分割线标签</strong></h4><ul><li>换行:&lt;br&#x2F;&gt;文本强制换行显示</li><li>水平分隔线：&lt;hr&#x2F;&gt; 插入水平分隔线</li></ul><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a><strong>文本格式化标签</strong></h4><table><thead><tr><th align="left"><strong>加粗</strong></th><th align="center">&lt;strong&gt;&lt;&#x2F;strong&gt;</th><th align="right">&lt;b&gt;&lt;&#x2F;b&gt;</th></tr></thead><tbody><tr><td align="left"><strong>倾斜</strong></td><td align="center">&lt;em&gt;&lt;&#x2F;em&gt;</td><td align="right">&lt;i&gt;&lt;&#x2F;i&gt;</td></tr><tr><td align="left"><strong>删除线</strong></td><td align="center">&lt;del&gt;&lt;&#x2F;del&gt;</td><td align="right">&lt;s&gt;&lt;&#x2F;s&gt;</td></tr><tr><td align="left"><strong>下划线</strong></td><td align="center">&lt;ins&gt;&lt;&#x2F;ins&gt;</td><td align="right">&lt;u&gt;&lt;&#x2F;u&gt;</td></tr></tbody></table><h4 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a><strong>盒子标签</strong></h4><ul><li>&lt;div&gt;&lt;&#x2F;div&gt;一行只能放一个（块元素）</li><li>&lt;span&gt;&lt;&#x2F;span&gt;一行可以放多个（行内元素）</li></ul><h4 id="图像标签（单标签）"><a href="#图像标签（单标签）" class="headerlink" title="图像标签（单标签）"></a><strong>图像标签（单标签）</strong></h4><p>&lt;img&#x2F;&gt;</p><table><thead><tr><th align="left">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">src</td><td align="center">图片</td><td align="center">必须属性</td></tr><tr><td align="left">alt</td><td align="center">文本</td><td align="center">替换文本。图像不能显示时的文字</td></tr><tr><td align="left">title</td><td align="center">文本</td><td align="center">提示文本。鼠标放到图像上，显示的文字</td></tr><tr><td align="left">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="left">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="left">border</td><td align="center">像素</td><td align="center">设置图像的边框粗细</td></tr></tbody></table><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p><strong>&lt;a href&#x3D;”跳转目标” target&#x3D;”目标窗口的弹出方式”&gt;文本或图像</a></strong></p><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a><strong>表格标签</strong></h4><p><strong>常用属性</strong></p><ul style="list-style-type: circle;"><li>border：表示表格的边框宽度，单位是像素，即px；</li><li> rowspan：表示多行合并，可以指定具体要合并的行数；(不要忘记删除多余的单元格)</li><li> colspan：表示多列合并，可以指定具体要合并的列数；(不要忘记删除多余的单元格)</li><li>  cellpadding：表示单元格边缘与其单元格内容之间的空白间距；</li><li>cellspacing：表示单元格之间的空白间距；</li><li>width：表示表格的宽度；</li><li>align：表示表格相对周围元素的对齐方式。</li></ul><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ul style="list-style-type: circle;"><li><strong>无序列表：使用&ltul>标签，里面放着&ltli>标签，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。&ltul>&lt/ul>中只能嵌套&ltli>标签&ltli>&lt/li>中可以放任何标签。</strong><p>type属性可以指定列表项的符号类型，如：disc（默认）：小圆点，circle：空心圆圈，square：方块</p></li><li><strong>使用&ltol>标签，里面放着&ltli>标签，列表项目使用数字进行标记&ltol>&lt/ol>中只能嵌套&ltli>标签</strong><p>type属性可以指定列表项的符号类型，如：i：罗马数字开始start属性，指定起始编号。</p></li><li><strong>自定义列表：使用&ltdl>标签，&ltdt>标签用来定义项目/名字，&ltdd>描述每一个项目/名字</strong><p>&ltdl>&lt/dl>只能包含&ltdt>和&ltdd></p></li></ul><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a><strong>表单标签</strong></h4><p>标签的常用属性：</p><table><thead><tr><th align="left">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">type</td><td align="center">见下表</td><td align="center">用于设置标签的不同形式</td></tr><tr><td align="left">value</td><td align="center">用户自定义</td><td align="center">设置input元素的默认值</td></tr></tbody></table><p>标签type属性值：</p><table><thead><tr><th align="left">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">button</td><td align="center">定义可点击按钮</td></tr><tr><td align="left">checkbox</td><td align="center">定义复选框，一组复选框name属性必须相同</td></tr><tr><td align="left">password</td><td align="center">定义密码字段，该字段中的字符被掩码</td></tr><tr><td align="left">radio</td><td align="center">定义单选按钮，一组单选按钮的name属性值必须相同</td></tr><tr><td align="left">reset</td><td align="center">定义重置按钮，清除表单中的所有数据</td></tr><tr><td align="left">submit</td><td align="center">定义提交按钮，提交到action属性指定的地址</td></tr><tr><td align="left">text</td><td align="center">定义单行的输入字段，用户可在其中输入文本，默认宽度为20字符</td></tr></tbody></table><h2 id="分类（元素显示模式）"><a href="#分类（元素显示模式）" class="headerlink" title="分类（元素显示模式）"></a>分类（元素显示模式）</h2><table><thead><tr><th align="left">元素模式</th><th align="center">元素排列</th><th align="center">设置样式</th><th align="center">默认宽度</th><th align="center">包含</th></tr></thead><tbody><tr><td align="left">块级元素</td><td align="center">一行只能放一个</td><td align="center">可以设置宽度高度</td><td align="center">容器的100%</td><td align="center"><ul><li>标题标签：h1, h2, h3, h4, h5, h6</li><li>段落标签：p</li><li>换行标签：br</li><li>水平分隔符标签：hr</li><li>div</li><li>…</li></ul></td></tr><tr><td align="left">行内元素</td><td align="center">一行可以放多个</td><td align="center">不可以直接设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"><ul><li>span</li><li>图像标签：img</li><li>文本格式化标签：i, em</li><li>输入标签：input</li><li>…</li></ul></td></tr><tr><td align="left">行内块元素</td><td align="center">一行可以放多个</td><td align="center">可以设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2024/02/27/hello-world/"/>
    <url>/2024/02/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
