<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js基础</title>
    <link href="/2024/03/06/js%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/06/js%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1.JavaScript简介"></a>1.JavaScript简介</h2><ul><li><p>JavaScript 是一门跨平台、面向对象的脚本语言，它能使网页可交互（例如拥有复杂的动画，可点击的按钮，通俗的菜单等）。另外还有高级的服务端 Javascript 版本，例如 Node.js，它可以让你在网页上添加更多功能，不仅仅是下载文件（例如在多台电脑之间的协同合作）。在宿主环境（例如 web 浏览器）中，JavaScript 能够通过其所连接的环境提供的编程接口进行控制。</p></li><li><p>JavaScript是一种动态弱类型语言</p><table><thead><tr><th align="center">JavaScript</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">面向对象。不区分对象类型。通过原型机制继承，任何对象的属性和方法均可以被动态添加。存放任意类型。</td><td align="center">基于类系统。分为类和实例，通过类层级的定义实现继承。不能动态增加对象或类的属性或方法。存放指定类型。</td></tr><tr><td align="center">变量类型不需要提前声明 (动态类型)。任意时刻存放</td><td align="center">变量类型必须提前声明 (静态类型)。</td></tr><tr><td align="center">不能直接自动写入硬盘</td><td align="center">可以直接自动写入硬盘。</td></tr></tbody></table></li><li><p>如今，JavaScript 已经成为了与 HTML&#x2F;CSS 完全集成的，使用最广泛的浏览器语言。</p></li></ul><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><p>我们可以使用 var、let 或 const 声明变量来存储数据。</p><ul><li>let—现代的变量声明方式。</li><li>var—老旧的变量声明方式。一般情况下，我们不会再使用它。<br><em>（var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined）</em><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br>for (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 10; i++) &#123;</span><br>  a[i] <span class="hljs-operator">=</span> function () &#123;<br>    console.log(i)<span class="hljs-comment">;</span><br>  &#125;<span class="hljs-comment">;</span><br>&#125;<br>a[<span class="hljs-number">6</span>]()<span class="hljs-comment">;//10</span><br>//var声明的变量不具备块级作用域特性，是全局变量<br></code></pre></td></tr></table></figure></li><li>const—类似于let，但是变量的值<strong>无法被修改</strong> 。<div style="border: #e5b832 solid 2px; border-radius: 10px; background-color: antiquewhite; padding: 5px;">变量应当以一种容易理解变量内部是什么的方式进行命名。</div></li></ul><h2 id="3-JavaScript标识符"><a href="#3-JavaScript标识符" class="headerlink" title="3.JavaScript标识符"></a>3.JavaScript标识符</h2><p>所有JavaScript变量必须<strong>以唯一的名称</strong>的标识。<br>这些唯一的名称称为标识符。<br>构造变量名称（唯一标识符）的通用规则是：</p><ul><li>名称可包含字母、数字、下划线和美元符号</li><li>名称也可以以字母，$和_开头</li><li>名称对大小写敏感（y和Y是不同的变量）</li><li>保留字无法用作变量名称</li></ul><p>##数据类型<br>JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 object 为复杂数据类型）。</p><ul><li>Number<ul><li>用于任何类型的数字：整数或浮点数，在 ±(253-1) 范围内的整数。</li></ul></li><li>Bigint<ul><li>用于任意长度的整数。</li></ul></li><li>String<ul><li>用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li></ul></li><li>Boolean<ul><li>用于 true 和 false。</li><li>true不一定等于1,false不一定等于0。</li></ul></li><li>Null<ul><li>用于未知的值 —— 只有一个 null 值的独立类型。</li><li>null是表示一个空对象指针。</li></ul></li><li>Undefined<ul><li>用于未定义的值 —— 只有一个 undefined 值的独立类型。</li><li>在使用var 声明变量但未对其加初始化时，这个变量就是undefined。</li></ul></li><li>Symbol<ul><li>用于唯一的标识符。</li></ul></li><li>Object<ul><li>用于更复杂的数据结构，比如 function、Array、Date。</li></ul></li></ul><div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">我们可以通过 typeof 运算符查看存储在变量中的数据类型。</div><br><ul><li>我们可以通过 typeof 运算符查看存储在变量中的数据类型。</li><li>以字符串的形式返回类型名称，例如 “string”。</li><li>typeof null 会返回 “object” —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 object。</li></ul><h2 id="5-值的比较"><a href="#5-值的比较" class="headerlink" title="5.值的比较"></a>5.值的比较</h2><ul><li><p>运算符</p><table><thead><tr><th align="center">等值检测运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;（不相等）</td><td align="center">比较两个操作数的值是否相等</td></tr><tr><td align="center">!&#x3D;（不相等）</td><td align="center">比较两个操作数的值是否不相等</td></tr><tr><td align="center">&#x3D;&#x3D;&#x3D;（全等）</td><td align="center">比较两个操作数的值是否相等，同时检测它们的类型是否相同</td></tr><tr><td align="center">!&#x3D;&#x3D;（不全等）</td><td align="center">比较两个操作数的值是否不相等，同时检测它们的类型是否不相同</td></tr></tbody></table></li><li><p>比较规则</p><p> 1.比较运算符始终返回布尔值。<br> 2.字符串的比较，会按照“词典”顺序逐字符地比较大小。<br> 3.在相等运算中，应注意以下几个问题：</p><ul><li>如果操作数是布尔值，则先转换为数值，其中false转为0，true转换为1。</li><li>果一个操作数是字符串，另一个操作数是数字，则先尝试把字符串转换为数字。</li><li>如果一个操作数是字符串，另一个操作数是对象，则先尝试把对象转换为字符串。</li><li>如果一个操作数是数字，另一个操作数是对象，则先尝试把对象转换为数字。</li><li>如果两个操作数都是对象，则比较引用地址。如果引用地址相同，则相等；否则不等。  <div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">  <ol>  <li>在非严格相等 == 下，null 和 undefined 相等且各自不等于任何其他的值。</li>  <li>NaN与任何值都不相等，包括它自己。任何操作数与NaN比较，都是false</li>  <li>在使用>或&lt进行比较时，需要注意变量可能为 null/undefined 的情况。比较好的方法是单独检查变量是否等于 null/undefined。</li>  </ol>  </div></li></ul></li></ul><h2 id="6-类型转换"><a href="#6-类型转换" class="headerlink" title="6.类型转换"></a>6.类型转换</h2><p>a.显式类型转换</p><ul><li><strong>toString()</strong><br>该方法不会影响到原变量，它会将转换的结构返回。但是注意，Null和Undefined没有toString()方法，如果调用它们的方法，则会报错。<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> a.toString()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><strong>String()</strong><br>将被转换的数据作为参数传递给函数。使用String函数做类型强制转换时，对于Number和Boolean就是调用toString()方法，对于null和undefined，就不会调用toString()方法，它会将null直接转换成”null”，将undefined转换成”undefined”。<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> <span class="hljs-number">123</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> String(a)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><p>b.将其他的数据类型转换为Number类型</p><ul><li>Number()<br>1.如果是纯数字的字符串，则直接将其转换为数字。<br>2.如果字符串中有非数字的内容，则转换为NaN。<br>3.布尔类型转换成数字：Ture转成1；False转成0。<br>4.Null转成数字0。<br>5.Undefined转成数字NaN。<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>a = <span class="hljs-built_in">Number</span>(a);<span class="hljs-comment">//a:123</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123abc&#x27;</span>;<br>a = <span class="hljs-built_in">Number</span>(a);<span class="hljs-comment">//a:NaN</span><br></code></pre></td></tr></table></figure></li></ul><ul><li>parseInt()，parseFloat()<div style="border: #e5b832 solid 2px; border-radius: 7px; background-color: antiquewhite; padding: 5px;">针对字符串转换成数字</div></li></ul><ol><li>parseInt()把一个字符串转换为一个整数，只取整数部分；</li><li>parseFloat()把一个字符串转换为一个浮点数，可获得有效小数;</li><li>对非String使用parseInt()或parseFloat()，它会将其转换为String.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123abc&#x27;</span>,<br><span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;12.34.56ab&#x27;</span>;<br>a = <span class="hljs-built_in">parseInt</span>(a);<span class="hljs-comment">//a:123</span><br>b = <span class="hljs-built_in">parseFloat</span>(b);<span class="hljs-comment">//b:12.34</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2024/02/29/CSS/"/>
    <url>/2024/02/29/CSS/</url>
    
    <content type="html"><![CDATA[<h2 id="section9">一.CSS选择器的概念</h2>    <br>    <p>CSS选择器，是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式。</p>    <br>    <div style="border: 3px solid gold;">        <ol>            <li>通配选择器，由一个星号（*）代指它选中了文档中的所有内容。</li>            <li>类型选择器，也叫标签名选择器或者是元素选择器，它在文档中选择了一个 HTML 标签/元素</li>            <li>类选择器，以一个句点（.）开头，会选择文档中应用了这个类的所有物件。</li>            <li>id选择器，开头为#而非句点，不过基本上和类选择器是同种用法。一个 ID 只会一般用到一次，虽然用多次也能正常显示，但是用javascript通过id来控制元素时就会出现错误。</li>        </ol>    </div>   <img src="/2024/02/29/CSS/1_%E5%89%AF%E6%9C%AC.png" class="">    <p>层叠是 CSS 的一个基本特征，意为多个选择符之间具有特定的优先级，它是一个定义了如何合并来自多个源的属性值的算法。</p>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br>      <br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:bule;<br>&#125;<br></code></pre></td></tr></table></figure>    <div>在上面的代码块中，我们为p选择器定义了两个规则，但是段落最后是蓝色的。这是因为将其设置为蓝色的声明将出现在样式表的后面，而稍后的样式将覆盖以前的样式。</div>    <br>    <div>这是在同样优先级的情况下，如果在优先级不同时，</div>    <br>    <div>比如，在我们同时使用了类选择器和元素选择器的前一个例子中，类将获胜，使得段落变红——即使它出现在样式表的前面。</div>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.special</span>&#123;<br><span class="hljs-attribute">color</span>:aqua;<br>&#125;<br>       <br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:black;<br>&#125;<br></code></pre></td></tr></table></figure>    <div>所以，在同优先级的情况下，后定义的生效，不同级则优先级高的生效。</div>    <br>    <div>各优先级关系，一般来说，选择器的优先级，范围越小，优先级越高</div>    <br>    <div>id选择器 > 类选择器 > 元素选择器 > 通配符选择器</div>      <img src="/2024/02/29/CSS/2_%E5%89%AF%E6%9C%AC.png" class="">    <h2 id="section10">二.CSS基本样式</h2>    <br>    <h3>常用样式</h3>    <h4>1.font-size:字体大小px</h4>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-weight</span>:normal;//字体粗细<br><span class="hljs-attribute">font-style</span>:italic;//字体倾斜<br></code></pre></td></tr></table></figure>    <br>    <h4>2.text-align:center;//文本对齐</h4>       <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: none; //无装饰<br> <span class="hljs-attribute">text-decoration</span>: overline; //上划线<br> <span class="hljs-attribute">text-decoration</span>: line-through; //中划线<br> <span class="hljs-attribute">text-decoration</span>: underline; //下划线<br> <span class="hljs-attribute">text-transform</span>: uppercase; //文本转换，全部换为大写字母<br> <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">50px</span>; //首行缩进<br><span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">3px</span>; //字母间距<br> <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">10px</span>; //单词间距<br> <span class="hljs-attribute">line-height</span>: <span class="hljs-number">0.8</span>; //行间距<br> <span class="hljs-attribute">white-space</span>: nowrap; //禁用<span class="hljs-selector-tag">html</span>框中文字编辑时的换行符（不必懂）<br> <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> red;//分别是文本的水平、垂直阴影以及阴影的模糊效果、阴影颜色<br></code></pre></td></tr></table></figure>    <h4>3.color:字体颜色</h4>        <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">使用 <span class="hljs-attribute">color</span> 属性：可以直接为元素指定 <span class="hljs-attribute">color</span> 属性来设置字体颜色<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br>使用 RGB 值：可以使用 RGB 值来指定颜色<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <br>&#125;<br><br>使用十六进制值：也可以使用十六进制值来指定颜色<br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>; <br>&#125;<br></code></pre></td></tr></table></figure>    <br>    <h4>4.background:背景样式</h4>           <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: blue; //颜色名称方式<br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); //RGB方式<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff0000</span>; //十六进制方式<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;bg.png&quot;</span>) ; //设置背景图片<br><span class="hljs-attribute">background-size</span>: contain/cover; // 图片相对于盒子的尺寸<br><span class="hljs-attribute">background-repeat</span>: repeat-x; //沿x方向阵列<br><span class="hljs-attribute">background-position</span>: right top; //设置背景图片初始位置<br><span class="hljs-attribute">background-attachment</span>: fixed; //背景图片是否随网页滑动<br><span class="hljs-attribute">background</span>: <span class="hljs-number">#ffffff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;tree.png&quot;</span>) no-repeat right top;//简写形式<br></code></pre></td></tr></table></figure>    <br>    <h4>5.height,width,margin,padding、border</h4>      <img src="/2024/02/29/CSS/3_%E5%89%AF%E6%9C%AC.png" class="">            <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border-style</span>: solid; // 边框样式<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#ccc</span>; // 边框颜色<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">15px</span>; // 边框宽度<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>; //允许你设置元素的外边框圆角,该属性是将这四个属性<span class="hljs-attribute">border-top-left-radius</span>,<span class="hljs-attribute">border-top-right-radius</span>,<span class="hljs-attribute">border-bottom-right-radius</span>,<span class="hljs-attribute">border-bottom-left-radius</span>简写为一个属性。<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">15px</span> solid green; //边框粗细 实线 颜色，dotted是点线，double是双线，dashed是虚线<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br>   //<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>; 设置内容的高度<br>   //<span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>; 设置内容的宽度<br></code></pre></td></tr></table></figure>    <h4>6.outline-style:轮廓样式</h4>            <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">outline-color</span>: red; //轮廓颜色<br><span class="hljs-attribute">outline-style</span>: dotted; //轮廓样式<br><span class="hljs-attribute">outline-width</span>: thin; 轮廓宽度<br><span class="hljs-attribute">outline</span>: <span class="hljs-number">5px</span> solid yellow; 简写轮廓属性<br>&lt;<span class="hljs-attribute">outline-offset</span>: <span class="hljs-number">25px</span>;//轮廓偏移<br></code></pre></td></tr></table></figure>    <h4>7.轮廓（outline）与边框（border）的区别：</h4> <div style="border: 3px solid rgb(253, 232, 179);">        <ol type="a">            <li>border 可应用于几乎所有有形的 html 元素，而 outline 是针对链接、表单控件等元素设计。</li>            <li>outline 的效果将随元素的 focus 而自动出现(除非手动设置outline-style)，相应的由 blur（blur事件，即指元素失去焦点） 而自动消失。这些都是浏览器的默认行为，无需JavaScript 配合 CSS 来控制。</li>            <li>outline 是不占空间的，不会像 border 那样影响元素的尺寸或者位置，既不会增加额外的 width 或者 height</li>            <li>对于input之类的表单控件，当你手动设置outline-style，它将不会采用默认的触发方式，而是直接显示，在没有手动设置outline-style的情况下，outline-width不生效</li>        </ol>    </div>     <h4>7.cursor的常用方法</h4>     <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">auto：浏览器自动决定合适的光标。<br>default：默认光标，通常是一个箭头。<br>pointer：手形光标，表示链接。<br>help：帮助光标，通常是一个问号。<br>wait：等待光标，表示正在加载或处理中。<br>text：文本光标，表示可编辑文本。<br>move：移动光标，表示可移动对象。<br>not-allowed：禁止操作光标，表示不允许点击或操作。<br></code></pre></td></tr></table></figure>    <h2 id="section11">三.CSS伪元素和伪类</h2>    <h3>什么是伪类？</h3>    <div>伪类是选择器的一种，它用于选择处于特定状态的元素。</div>    <h4>语法</h4>    <div>伪类就是开头为冒号的关键字：</div>    <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">selector:pseudo-<span class="hljs-keyword">class</span>-<span class="hljs-keyword">name</span><span class="hljs-comment">&#123;&#125;</span><br></code></pre></td></tr></table></figure>    <h4>常见伪类</h4>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-comment">/* 在用户将指针挪到元素上的时候才会激活 */</span><br><span class="hljs-selector-pseudo">:focus</span> <span class="hljs-comment">/* 获得焦点的元素激活 */</span><br><span class="hljs-selector-pseudo">:active</span> <span class="hljs-comment">/* 当元素被激活（例如，当按钮被点击并保持按下状态）时应用样式。*/</span><br></code></pre></td></tr></table></figure>    <h3>什么是伪元素？</h3>    <div>伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。</div>    <h4>语法</h4>    <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">selector:</span>:<span class="hljs-title class_">pseudo-element</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">          property:</span> <span class="hljs-attr">value</span><span class="hljs-punctuation">;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>    <h4>常见伪元素</h4>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">::after</span> <span class="hljs-comment">/* 用来创建一个伪元素，作为已选中元素的最后一个子元素,通常会配合content属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素 */</span><br><span class="hljs-selector-pseudo">::before</span> <span class="hljs-comment">/* 用来创建一个伪元素，作为已选中元素的第一个子元素，其余同上 */</span><br><span class="hljs-attribute">content</span> <span class="hljs-comment">/* 用于在元素的 ::before 和 ::after 伪元素中插入内容 */</span><br></code></pre></td></tr></table></figure>    <h3>html与css的结合方式</h3>    <ol>        <li>行内式：html中的标签属性 style ：适用于单纯只有一个标签需要设置时的特殊样式。如果多个标签需要应用同一个样式，建议采用内嵌式。</li>          <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: blue;background-color: yellow;border: 1px solid black;&quot;</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>        <li>内嵌式：建议在head中使用，使用标签 style 适用于当前页面多个标签使用同一个样式。</li>        <li>外链式：link:适用于多个页面使用同一个样式时。</li>    </ol>    <div style="text-align:left;"><strong>注意：link中href属性必须有，表示链接的css文件。</strong></div>   ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器运行原理</title>
    <link href="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <url>/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[ <h2>浏览器运行原理</h2>    <br>    <h3 id="section1">1.浏览器简化结构图</h3> <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="">    <br>    <h3 id="section2">2.浏览器内核</h3>    <br>    <ul type="square">        <li>常见浏览器:IE、Edge、Firefox、Chrome、Safari、Opera</li>        <li>浏览器内核分成两部分：渲染引擎和JS引擎</li>        <li type="circle">渲染引擎:对HTML文档进行解析并将其显示在页面上的工具</li>        <li type="circle">由于js引擎越来越独立，内核就倾向于只指渲染引擎</li>    </ul>  <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png" class="">    <h3 id="section3">3.浏览器是如何工作的</h3>    <br>    <p><strong>1.进程和线程</strong></p>    <p>进程是操作系统进行资源分配和调度的基本单元,可以申请和拥有计算机资源,进程是程序的基本执行实体。</p>    <p>线程是操作系统能够进行运算调度的最小单位,一个进程中可以并发多个线程,每条线程并行执行不同的任务。</p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B.png" class="">    <ul type="square">        <li>线程之间可以互相通信，交换数据</li>        <li>进程之间相对独立，并且内存也相对独立互不干扰</li>        <li>若进程之间需要相互通信，需要借用IPC（通信管道）</li>    </ul>    <br>    <p><strong>2.早期浏览器结构</strong></p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%97%A9%E6%9C%9F%E6%B5%8F%E8%A7%88%E5%99%A8.png" class="">    <ol>        <li style="color: chocolate;">不稳定 因为：其中一个线程的卡死可能会导致整个进程出问题，比如你打开一个标签页，其中一个标签页卡死可能会导致整个浏览器无法运行。</li>        <li style="color: chocolate;">不安全 因为：浏览器线程之间是可以共享数据的，那JS线程岂不是可以随意访问浏览器进程内的所有数据。</li>        <li style="color: chocolate;">不流畅 因为：一个进程需要负责太多事情，会导致运行效率问题。</li>    </ol>    <br>    <p><strong>3.现代浏览器结构</strong></p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%93%E6%9E%84.png" class="">    <ol type="i" style="background-color: blanchedalmond;">        <li>浏览器进程负责控制，Chrome浏览器除标签页外的用户界面，包括包括地址栏、书签、后退和前进按钮，以及负责与浏览器的其他进程协调工作。</li>        <li>网络进程负责发起接受网络请求</li>        <li>GPU进程负责整个浏览器界面的渲染</li>        <li>插件进程负责控制网站使用的所有插件，例如flash</li>        <li>渲染器进程用来控制显示tab标签内的所有内容</li>    </ol>    <br>    <h3 id="section4"><strong>4.在浏览器中搜索内容时，浏览器内部发生了什么</strong></h3>    <br>    <span>相关词释义：</span>    <ul style="font-family:cursive">        <li style="font-size: large;">DOM就是文档对象模型，是浏览器对页面在其内部的表示形式</li>        <li style="font-size: large;">layout树上的每个节点都记录了（X,Y）坐标和边框尺寸。</li>        <li style="font-size: large;">绘制记录表记录了会绘制的顺序（类似于图层）</li>        <li style="font-size: large;">Layer树是分层树，记录层级</li>        <li style="font-size: large;">draw quads是图块信息</li>    </ul>    <br>    <a href="https://gagjcxhxrb.feishu.cn/docx/VlWidsVZeoX8ySxACJRcN3P8njz?openbrd=1&doc_app_id=501&blockId=KINodiA1to1oLFxJUwbcONpynuf&blockType=whiteboard&blockToken=Rrotw6LkMhpnobbpATfcGnPYnWg#KINodiA1to1oLFxJUwbcONpynuf"        target="_blank">详细的浏览器内部进程</a>    <p style="font-size: larger;" style="font-weight: 600;">浏览器内部主要的进程</p>    <img src="/2024/02/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E6%B8%B2%E6%9F%93%E5%99%A8.png" class="">    <p><strong>内部进程具体的过程</strong></p>    <div style="border: #e5b832 solid 2px;">        <ol>        <li>浏览器进程中的网络线程请求获取到html数据后，通过IPC将数据传给渲染器进程的主线程</li>        <li>数据在主线程中经过解析来构造DOM树</li>        <li>css代码进行样式计算，使得DOM树得各个节点拥有各自的样式</li>        <li>根据DOM树和省城好的样式生成器layout树</li>        <li>通过遍历Layout树生成绘制顺序表</li>        <li>接着遍历Layout树生成了Layer树</li>        <li>主线程将layer树和绘制顺序表的信息一起传给合成器线程</li>        <li>合成器线程分图层，并将图层分为更小的图块，将其传给栅格化线程</li>        <li>栅格化线程进行栅格化</li>        <li>栅格化完成后，合成器线程得到栅格化线程传过去的图块信息（drawquads）</li>        <li>根据图块信息，合成器线程合成一个合成器帧，然后将其通过IPC传回浏览器进程</li>        <li>浏览器进程再将合成器帧传到GPU进行渲染</li>    </ol>    </div>        <br>    <p>布局、绘制和JS执行都是在主线程运行的，当在一帧的时间内布局和绘制结束后，如果还有剩余时间，JS就会拿到主线程的使用权，进而解析和执行JS代码。</p>    <p>如果在一帧的时间内未能解析并执行完js代码，则会造成一帧的卡顿。并且在解析和执行完js代码后，使用权才会由js代码变为主线程</p>    <br>    <h3 id="section5"><strong>5.回流（重排）和重绘</strong></h3>    <p>重绘 （Redraw）：某些元素的外观被改变所触发的浏览器行为（重新计算节点在屏幕中的绝对位置并渲染的过程）。</p>    <p>例如：修改元素的填充颜色，会触发重绘。</p>    <p>回流（重排）（Reflow）：重新生成布局，重新排列元素（重新计算各节点和css具体的大小和位置：渲染树需要重新计算所有受影响的节点）。</p>    <p>例如：改元素的宽高，会触发重排。</p>    <h4>通过两者概念区别明显得知，重排要比重绘的成本大得多，我们应该尽量减少重排操作，减少页面性能消耗</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Html基础知识</title>
    <link href="/2024/02/28/Html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/02/28/Html%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-网页的构成"><a href="#1-网页的构成" class="headerlink" title="1.网页的构成"></a>1.网页的构成</h2><p>网页一般由三部分组成，分别是HTML（超文本标记语言）、CSS<strong>（层叠样式表）</strong>和JavaScript<strong>（简称“JS”动态脚本语言）</strong>，它们三者在网页中分别承担着不同的任务。</p><ul><li><strong>HTML 负责定义网页的内容</strong></li><li><strong>CSS 负责描述网页的布局</strong></li><li><strong>JavaScript负责网页的行为</strong></li></ul><h2 id="2-常用html元素"><a href="#2-常用html元素" class="headerlink" title="2.常用html元素"></a>2.常用html元素</h2><h4 id="标签标题"><a href="#标签标题" class="headerlink" title="标签标题"></a><strong>标签标题</strong></h4><p>作为标题使用，并且依据重要性递减（h1,h2….h6）</p><h4 id="换行标签和水平分割线标签"><a href="#换行标签和水平分割线标签" class="headerlink" title="换行标签和水平分割线标签"></a><strong>换行标签和水平分割线标签</strong></h4><ul><li>换行:&lt;br&#x2F;&gt;文本强制换行显示</li><li>水平分隔线：&lt;hr&#x2F;&gt; 插入水平分隔线</li></ul><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a><strong>文本格式化标签</strong></h4><table><thead><tr><th align="left"><strong>加粗</strong></th><th align="center">&lt;strong&gt;&lt;&#x2F;strong&gt;</th><th align="right">&lt;b&gt;&lt;&#x2F;b&gt;</th></tr></thead><tbody><tr><td align="left"><strong>倾斜</strong></td><td align="center">&lt;em&gt;&lt;&#x2F;em&gt;</td><td align="right">&lt;i&gt;&lt;&#x2F;i&gt;</td></tr><tr><td align="left"><strong>删除线</strong></td><td align="center">&lt;del&gt;&lt;&#x2F;del&gt;</td><td align="right">&lt;s&gt;&lt;&#x2F;s&gt;</td></tr><tr><td align="left"><strong>下划线</strong></td><td align="center">&lt;ins&gt;&lt;&#x2F;ins&gt;</td><td align="right">&lt;u&gt;&lt;&#x2F;u&gt;</td></tr></tbody></table><h4 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a><strong>盒子标签</strong></h4><ul><li>&lt;div&gt;&lt;&#x2F;div&gt;一行只能放一个（块元素）</li><li>&lt;span&gt;&lt;&#x2F;span&gt;一行可以放多个（行内元素）</li></ul><h4 id="图像标签（单标签）"><a href="#图像标签（单标签）" class="headerlink" title="图像标签（单标签）"></a><strong>图像标签（单标签）</strong></h4><p>&lt;img&#x2F;&gt;</p><table><thead><tr><th align="left">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">src</td><td align="center">图片</td><td align="center">必须属性</td></tr><tr><td align="left">alt</td><td align="center">文本</td><td align="center">替换文本。图像不能显示时的文字</td></tr><tr><td align="left">title</td><td align="center">文本</td><td align="center">提示文本。鼠标放到图像上，显示的文字</td></tr><tr><td align="left">width</td><td align="center">像素</td><td align="center">设置图像的宽度</td></tr><tr><td align="left">height</td><td align="center">像素</td><td align="center">设置图像的高度</td></tr><tr><td align="left">border</td><td align="center">像素</td><td align="center">设置图像的边框粗细</td></tr></tbody></table><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p><strong>&lt;a href&#x3D;”跳转目标” target&#x3D;”目标窗口的弹出方式”&gt;文本或图像</a></strong></p><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a><strong>表格标签</strong></h4><p><strong>常用属性</strong></p><ul style="list-style-type: circle;"><li>border：表示表格的边框宽度，单位是像素，即px；</li><li> rowspan：表示多行合并，可以指定具体要合并的行数；(不要忘记删除多余的单元格)</li><li> colspan：表示多列合并，可以指定具体要合并的列数；(不要忘记删除多余的单元格)</li><li>  cellpadding：表示单元格边缘与其单元格内容之间的空白间距；</li><li>cellspacing：表示单元格之间的空白间距；</li><li>width：表示表格的宽度；</li><li>align：表示表格相对周围元素的对齐方式。</li></ul><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ul style="list-style-type: circle;"><li><strong>无序列表：使用&ltul>标签，里面放着&ltli>标签，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。&ltul>&lt/ul>中只能嵌套&ltli>标签&ltli>&lt/li>中可以放任何标签。</strong><p>type属性可以指定列表项的符号类型，如：disc（默认）：小圆点，circle：空心圆圈，square：方块</p></li><li><strong>使用&ltol>标签，里面放着&ltli>标签，列表项目使用数字进行标记&ltol>&lt/ol>中只能嵌套&ltli>标签</strong><p>type属性可以指定列表项的符号类型，如：i：罗马数字开始start属性，指定起始编号。</p></li><li><strong>自定义列表：使用&ltdl>标签，&ltdt>标签用来定义项目/名字，&ltdd>描述每一个项目/名字</strong><p>&ltdl>&lt/dl>只能包含&ltdt>和&ltdd></p></li></ul><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a><strong>表单标签</strong></h4><p>标签的常用属性：</p><table><thead><tr><th align="left">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">type</td><td align="center">见下表</td><td align="center">用于设置标签的不同形式</td></tr><tr><td align="left">value</td><td align="center">用户自定义</td><td align="center">设置input元素的默认值</td></tr></tbody></table><p>标签type属性值：</p><table><thead><tr><th align="left">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">button</td><td align="center">定义可点击按钮</td></tr><tr><td align="left">checkbox</td><td align="center">定义复选框，一组复选框name属性必须相同</td></tr><tr><td align="left">password</td><td align="center">定义密码字段，该字段中的字符被掩码</td></tr><tr><td align="left">radio</td><td align="center">定义单选按钮，一组单选按钮的name属性值必须相同</td></tr><tr><td align="left">reset</td><td align="center">定义重置按钮，清除表单中的所有数据</td></tr><tr><td align="left">submit</td><td align="center">定义提交按钮，提交到action属性指定的地址</td></tr><tr><td align="left">text</td><td align="center">定义单行的输入字段，用户可在其中输入文本，默认宽度为20字符</td></tr></tbody></table><h2 id="分类（元素显示模式）"><a href="#分类（元素显示模式）" class="headerlink" title="分类（元素显示模式）"></a>分类（元素显示模式）</h2><table><thead><tr><th align="left">元素模式</th><th align="center">元素排列</th><th align="center">设置样式</th><th align="center">默认宽度</th><th align="center">包含</th></tr></thead><tbody><tr><td align="left">块级元素</td><td align="center">一行只能放一个</td><td align="center">可以设置宽度高度</td><td align="center">容器的100%</td><td align="center"><ul><li>标题标签：h1, h2, h3, h4, h5, h6</li><li>段落标签：p</li><li>换行标签：br</li><li>水平分隔符标签：hr</li><li>div</li><li>…</li></ul></td></tr><tr><td align="left">行内元素</td><td align="center">一行可以放多个</td><td align="center">不可以直接设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"><ul><li>span</li><li>图像标签：img</li><li>文本格式化标签：i, em</li><li>输入标签：input</li><li>…</li></ul></td></tr><tr><td align="left">行内块元素</td><td align="center">一行可以放多个</td><td align="center">可以设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2024/02/27/hello-world/"/>
    <url>/2024/02/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
